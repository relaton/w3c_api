---
http_interactions:
- request:
    method: get
    uri: https://api.w3.org/specifications-by-status/Recommendation?items=3000&page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Thu, 06 Mar 2025 15:22:13 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Thu, 06 Mar 2025 15:22:13 GMT
      cf-cache-status:
      - EXPIRED
      set-cookie:
      - __cf_bm=zEgJEcLiiUcs5tEUHUazgxCebzvXrL17qbej7m1eUhA-1741274533-1.0.1.1-7JH3gxtt3wmnuCOfRecLqe7sekrb2ubZTyWbP4e26YBjHaAz7ZV9WUoSF0f_lVFvl82sJP7HOf3.RF..gmqmWbmpDQ7bHxFn82OultYipcw;
        path=/; expires=Thu, 06-Mar-25 15:52:13 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 91c2d8e949fbd534-NRT
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 06 Mar 2025 15:22:13 GMT
- request:
    method: get
    uri: https://api.w3.org/specifications-by-status/Recommendation
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Wed, 12 Mar 2025 11:10:50 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Wed, 12 Mar 2025 11:10:50 GMT
      cf-cache-status:
      - EXPIRED
      set-cookie:
      - __cf_bm=30SCr4X6lgRycZ2aq7zASXIj0cpWfFxLQSiib1rbWyA-1741777850-1.0.1.1-5oede.I_HnGaVYc8bgRevGovMFPApRCXM.KUUjTBtY8Xu.Wbrj8fn6Pn2mYJXT9tSEEcfB_BiSxAn7D9CszEHPkwkpLrRWd2FAftaQIaonc;
        path=/; expires=Wed, 12-Mar-25 11:40:50 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 91f2d8edafb4e00d-NRT
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 12 Mar 2025 11:10:50 GMT
- request:
    method: get
    uri: https://api.w3.org/specifications?status=Recommendation
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.1
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Thu, 03 Jul 2025 17:17:31 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Thu, 03 Jul 2025 17:17:31 GMT
      cf-cache-status:
      - MISS
      set-cookie:
      - __cf_bm=T_n6ClymnXs9v33Cbv8q4YhiK5MZrN5zuw6vLYh7iLg-1751563051-1.0.1.1-35i2X.ClX7T1QrMolxnHuEaBlad2TtaKFKDjfuv.F0nXwO1KJJUOEMADNLDaaLwCuoClmq.CUTQtUOH16fdKya9XxUqFnojBUIpR0f7ZeZY;
        path=/; expires=Thu, 03-Jul-25 17:47:31 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 95980970083c84eb-HKG
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 03 Jul 2025 17:17:31 GMT
recorded_with: VCR 6.3.1
