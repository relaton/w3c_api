---
http_interactions:
- request:
    method: get
    uri: https://api.w3.org/specifications?items=3000&page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Thu, 06 Mar 2025 15:22:11 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Thu, 06 Mar 2025 15:22:11 GMT
      cf-cache-status:
      - EXPIRED
      set-cookie:
      - __cf_bm=vhmp562nIkDFuEeEjreWY8VFX4vGOj_3IK8Mlo5Dqyw-1741274531-1.0.1.1-DbmiXIDPIoxSWaEXtOKJkezX.0lsiE4rlenyN7hjyF5eyUK44P_eVe5nywW5.Ac9EG7fZ_wo2_5aj.D4v5IHHR1eOYIznHwNa45jGldf.Nc;
        path=/; expires=Thu, 06-Mar-25 15:52:11 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 91c2d8d95e28e37f-NRT
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 06 Mar 2025 15:22:11 GMT
- request:
    method: get
    uri: https://api.w3.org/specifications
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.12.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Wed, 12 Mar 2025 11:10:50 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Wed, 12 Mar 2025 11:10:50 GMT
      cf-cache-status:
      - EXPIRED
      set-cookie:
      - __cf_bm=rB4kK1HWJsQ.vXCKJMxNwgjDljPTh6VNtaehzo2n2pk-1741777850-1.0.1.1-BZxuy77YhrzW9htkISCssFulNyyKSYz0HTalJba2LYYstUIxWRSRa3Krk3MsYIeTpn0zsCYbUNqLto9DoXsslmTdTqcbgyP.Fw7YjCTpzlg;
        path=/; expires=Wed, 12-Mar-25 11:40:50 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 91f2d8e70887067d-NRT
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 12 Mar 2025 11:10:50 GMT
- request:
    method: get
    uri: https://api.w3.org/specifications?embed=false
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Sat, 05 Jul 2025 14:54:20 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Sat, 05 Jul 2025 14:54:20 GMT
      cf-cache-status:
      - MISS
      set-cookie:
      - __cf_bm=j49Ie_ZRc975XmGs2q8KpD23cx7fa_0AHJyvLr09Aic-1751727260-1.0.1.1-GRLG6SoAg4p2SeAwx5talwOc0ayvwH98RfrFGvCnI8EVxXf0S7Wre42wjbrIBQuzB.hdCPvqtEqiRZjZJTkTF6eB3jNgMWBnHryklHHYWY0;
        path=/; expires=Sat, 05-Jul-25 15:24:20 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 95a7b26e58cc166a-HKG
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICAgInBhZ2UiOiAxLAogICAgImxpbWl0IjogMTAwLAogICAgInBhZ2VzIjogMTcsCiAgICAidG90YWwiOiAxNjQzLAogICAgIl9saW5rcyI6IHsKICAgICAgICAic3BlY2lmaWNhdGlvbnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9BUyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWN0aW9uIFNoZWV0czogQSBNb2R1bGFyIFdheSBvZiBEZWZpbmluZyBCZWhhdmlvciBmb3IgWE1MIGFuZCBIVE1MIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29tcGFjdEhUTUwtMTk5ODAyMDkiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbXBhY3QgSFRNTCBmb3IgU21hbGwgSW5mb3JtYXRpb24gQXBwbGlhbmNlcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FUQUcxMCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQXV0aG9yaW5nIFRvb2wgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDEuMCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2F1dGhlbnRmb3JtIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJVc2VyIEFnZW50IEF1dGhlbnRpY2F0aW9uIEZvcm1zIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NTMSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cywgbGV2ZWwgMSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL1dELWFjc3MiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkF1cmFsIENhc2NhZGluZyBTdHlsZSBTaGVldHMgKEFDU1MpIFNwZWNpZmljYXRpb24iCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iZWNzcyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQmVoYXZpb3JhbCBFeHRlbnNpb25zIHRvIENTUyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJtb2QiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViIDEuMDogRnVuZGFtZW50YWxzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcmNvbCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQSBOb3RhdGlvbiBmb3IgQ2hhcmFjdGVyIENvbGxlY3Rpb25zIGZvciB0aGUgV1dXIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQUVSVCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiVGVjaG5pcXVlcyBGb3IgQWNjZXNzaWJpbGl0eSBFdmFsdWF0aW9uIEFuZCBSZXBhaXIgVG9vbHMiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DQ1BQLXJhIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb21wb3NpdGUgQ2FwYWJpbGl0aWVzL1ByZWZlcmVuY2UgUHJvZmlsZXM6IFJlcXVpcmVtZW50cyBhbmQgQXJjaGl0ZWN0dXJlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0NQUC10YSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29tcG9zaXRlIENhcGFiaWxpdGllcy9QcmVmZXJlbmNlIFByb2ZpbGVzOiBUZXJtaW5vbG9neSBhbmQgQWJicmV2aWF0aW9ucyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtQ09PUkRJTkFUSU9OIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDQy9QUCBJbXBsZW1lbnRvcnMgR3VpZGU6IEhhcm1vbml6YXRpb24gd2l0aCBFeGlzdGluZyBWb2NhYnVsYXJpZXMgYW5kIENvbnRlbnQgVHJhbnNmb3JtYXRpb24gSGV1cmlzdGljcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtdHJ1c3QiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNDL1BQIEltcGxlbWVudG9ycyBHdWlkZTogUHJpdmFjeSBhbmQgUHJvdG9jb2xzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2FsbC1jb250cm9sLXJlcXMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNhbGwgQ29udHJvbCBSZXF1aXJlbWVudHMgaW4gYSBWb2ljZSBCcm93c2VyIEZyYW1ld29yayIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjZGkiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkF1dGhvcmluZyBDaGFsbGVuZ2VzIGZvciBEZXZpY2UgSW5kZXBlbmRlbmNlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2N4bWwiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIlZvaWNlIEJyb3dzZXIgQ2FsbCBDb250cm9sOiBDQ1hNTCBWZXJzaW9uIDEuMCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoaXBzIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb21tb24gSFRUUCBJbXBsZW1lbnRhdGlvbiBQcm9ibGVtcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FUQUcyMCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQXV0aG9yaW5nIFRvb2wgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIChBVEFHKSAyLjAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jcGMtcmVxIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb3JlIFByZXNlbnRhdGlvbiBDaGFyYWN0ZXJpc3RpY3M6wqBSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJtb2QtcmVzaWQiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViIDEuMDogUmVzb3VyY2UgSWRlbnRpZmllcnMiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jaGFybW9kLW5vcm0iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViOiBTdHJpbmcgTWF0Y2hpbmciCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc2VsZWN0aW9uIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlbGVjdGlvbiBmb3IgRGV2aWNlIEluZGVwZW5kZW5jZSAoRElTZWxlY3QpIDEuMCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NEUlJlcXMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbXBvdW5kIERvY3VtZW50IGJ5IFJlZmVyZW5jZSBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBWZXJzaW9uIDEuMCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcnMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0RGUmVxcyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29tcG91bmQgRG9jdW1lbnQgVXNlIENhc2VzIGFuZCBSZXF1aXJlbWVudHMgVmVyc2lvbiAyLjAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DRFIiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbXBvdW5kIERvY3VtZW50IGJ5IFJlZmVyZW5jZSBGcmFtZXdvcmsgMS4wIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQzE0Ti1pc3N1ZXMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIktub3duIElzc3VlcyB3aXRoIENhbm9uaWNhbCBYTUwgMS4wIChDMTROLzEuMCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcmFiaWMtbWF0aCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQXJhYmljIG1hdGhlbWF0aWNhbCBub3RhdGlvbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2JhY2twbGFuZSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmljaCBXZWIgQXBwbGljYXRpb24gQmFja3BsYW5lIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xpcGJvYXJkLWFwaXMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNsaXBib2FyZCBBUEkgYW5kIGV2ZW50cyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NzZWxlY3Rpb24tcHJpbWVyIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlbGVjdGlvbiBQcmltZXIgMS4wIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NlbGVjdGlvbi14YWYiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkRlbGl2ZXJ5IENvbnRleHQ6IFhQYXRoIEFjY2VzcyBGdW5jdGlvbnMgMS4wIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29vbHVyaXMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvb2wgVVJJcyBmb3IgdGhlIFNlbWFudGljIFdlYiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NTUzIiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNhc2NhZGluZyBTdHlsZSBTaGVldHMgTGV2ZWwgMiBSZXZpc2lvbiAxIChDU1MgMi4xKSBTcGVjaWZpY2F0aW9uIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvd2FpLWFyaWEtcm9hZG1hcCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUm9hZG1hcCBmb3IgQWNjZXNzaWJsZSBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucyAoV0FJLUFSSUEgUm9hZG1hcCkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jaGFycmVxIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXF1aXJlbWVudHMgZm9yIFN0cmluZyBJZGVudGl0eSBNYXRjaGluZyBhbmQgU3RyaW5nIEluZGV4aW5nIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ29udGVudC1pbi1SREYxMCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVwcmVzZW50aW5nIENvbnRlbnQgaW4gUkRGIDEuMCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zLzJkY29udGV4dCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiSFRNTCBDYW52YXMgMkQgQ29udGV4dCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FwaS1wZXJtcyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUGVybWlzc2lvbnMgZm9yIERldmljZSBBUEkgQWNjZXNzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29udGFjdHMtYXBpIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJQaWNrIENvbnRhY3RzIEludGVudCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDEwIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIFNuYXBzaG90IDIwMTAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9odG1sLW1lZGlhLWNhcHR1cmUiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkhUTUwgTWVkaWEgQ2FwdHVyZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NTUDEiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5IDEuMCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FuaW1hdGlvbi10aW1pbmciLAogICAgICAgICAgICAgICAgInRpdGxlIjogIlRpbWluZyBjb250cm9sIGZvciBzY3JpcHQtYmFzZWQgYW5pbWF0aW9ucyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FwcC1wcml2YWN5LWJwIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXZWIgQXBwbGljYXRpb24gUHJpdmFjeSBCZXN0IFByYWN0aWNlcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2F1ZGlvcHJvYyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQXVkaW8gUHJvY2Vzc2luZyBBUEkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iYXR0ZXJ5LXN0YXR1cyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQmF0dGVyeSBTdGF0dXMgQVBJIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2FsZW5kYXItYXBpIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDYWxlbmRhciBBUEkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcGktZGVzaWduIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXZWIgQVBJIERlc2lnbiBDb29rYm9vayIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zLzJkY29udGV4dDIiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkhUTUwgQ2FudmFzIDJEIENvbnRleHQsIExldmVsIDIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1AyIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlY3VyaXR5IFBvbGljeSBMZXZlbCAyIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjZXNzaWJpbGl0eS1tZXRyaWNzLXJlcG9ydCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVzZWFyY2ggUmVwb3J0IG9uIFdlYiBBY2Nlc3NpYmlsaXR5IE1ldHJpY3MiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbWJpZW50LWxpZ2h0IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBbWJpZW50IExpZ2h0IFNlbnNvciIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhcHR1cmUtc2NlbmFyaW9zIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJNZWRpYVN0cmVhbSBDYXB0dXJlIFNjZW5hcmlvcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbXBvbmVudHMtaW50cm8iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkludHJvZHVjdGlvbiB0byBXZWIgQ29tcG9uZW50cyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbXBvc2l0aW5nLTEiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbXBvc2l0aW5nIGFuZCBCbGVuZGluZyBMZXZlbCAxIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBwLXVyaSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiVGhlIGFwcDogVVJMIFNjaGVtZSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL3VzaW5nLWFyaWEiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIlVzaW5nIEFSSUEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb250YWN0cy1tYW5hZ2VyLWFwaSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29udGFjdHMgTWFuYWdlciBBUEkiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iZWFjb24iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkJlYWNvbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fic3RyYWN0LXVpIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJNQlVJIC0gQWJzdHJhY3QgVXNlciBJbnRlcmZhY2UgTW9kZWxzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBwbWFuaWZlc3QiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIldlYiBBcHBsaWNhdGlvbiBNYW5pZmVzdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhcGFiaWxpdHktdXJscyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiR29vZCBQcmFjdGljZXMgZm9yIENhcGFiaWxpdHkgVVJMcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29yZSBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyAxLjEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY3Rpdml0eXN0cmVhbXMtY29yZSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWN0aXZpdHkgU3RyZWFtcyAyLjAiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY3Rpdml0eXN0cmVhbXMtdm9jYWJ1bGFyeSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWN0aXZpdHkgVm9jYWJ1bGFyeSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY25hbWUtMS4xIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBY2Nlc3NpYmxlIE5hbWUgYW5kIERlc2NyaXB0aW9uIENvbXB1dGF0aW9uIDEuMSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24tbW9kZWwiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIldlYiBBbm5vdGF0aW9uIERhdGEgTW9kZWwiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb2dhLXVzZXItcmVzZWFyY2giLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvZ25pdGl2ZSBBY2Nlc3NpYmlsaXR5IFVzZXIgUmVzZWFyY2giCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hdWRpby1vdXRwdXQiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkF1ZGlvIE91dHB1dCBEZXZpY2VzIEFQSSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NzcC1waW5uaW5nIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlY3VyaXR5IFBvbGljeSBQaW5uaW5nIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3JlZGVudGlhbC1tYW5hZ2VtZW50LTEiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNyZWRlbnRpYWwgTWFuYWdlbWVudCBMZXZlbCAxIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYW5ub3RhdGlvbi1wcm90b2NvbCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiV2ViIEFubm90YXRpb24gUHJvdG9jb2wiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbHJlcSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVxdWlyZW1lbnRzIGZvciBDaGluZXNlIFRleHQgTGF5b3V0IC0g5Lit5paH5o6S54mI6ZyA5rGCIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xlYXItc2l0ZS1kYXRhIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDbGVhciBTaXRlIERhdGEiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxNSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ1NTIFNuYXBzaG90IDIwMTUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DT1dMIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb25maW5lbWVudCB3aXRoIE9yaWdpbiBXZWIgTGFiZWxzIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NwLWNvb2tpZXMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5OiBDb29raWUgQ29udHJvbHMiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3AtZW1iZWRkZWQtZW5mb3JjZW1lbnQiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5OiBFbWJlZGRlZCBFbmZvcmNlbWVudCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NTUDMiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5IExldmVsIDMiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY3Rpdml0eXB1YiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWN0aXZpdHlQdWIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLXZvY2FiIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXZWIgQW5ub3RhdGlvbiBWb2NhYnVsYXJ5IgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NTMjIiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNhc2NhZGluZyBTdHlsZSBTaGVldHMgTGV2ZWwgMiBSZXZpc2lvbiAyIChDU1MgMi4yKSBTcGVjaWZpY2F0aW9uIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjZWxlcm9tZXRlciIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWNjZWxlcm9tZXRlciIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDE3IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDU1MgU25hcHNob3QgMjAxNyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24taHRtbCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiRW1iZWRkaW5nIFdlYiBBbm5vdGF0aW9ucyBpbiBIVE1MIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0LXJ1bGVzLWZvcm1hdC0xLjAiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkFjY2Vzc2liaWxpdHkgQ29uZm9ybWFuY2UgVGVzdGluZyAoQUNUKSBSdWxlcyBGb3JtYXQgMS4wIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY292anNvbi1vdmVydmlldyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiT3ZlcnZpZXcgb2YgdGhlIENvdmVyYWdlSlNPTiBmb3JtYXQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbG91ZC1icm93c2VyLWFyY2giLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNsb3VkIEJyb3dzZXIgQXJjaGl0ZWN0dXJlIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWxyZXEiLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkFyYWJpYyAmIFBlcnNpYW4gTGF5b3V0IFJlcXVpcmVtZW50cyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29yZSBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyAxLjIiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxOCIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ1NTIFNuYXBzaG90IDIwMTgiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb2dhLXVzYWJsZSIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiTWFraW5nIENvbnRlbnQgVXNhYmxlIGZvciBQZW9wbGUgd2l0aCBDb2duaXRpdmUgYW5kIExlYXJuaW5nIERpc2FiaWxpdGllcyIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY25hbWUtMS4yIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBY2Nlc3NpYmxlIE5hbWUgYW5kIERlc2NyaXB0aW9uIENvbXB1dGF0aW9uIDEuMiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY2Vzc2liaWxpdHktY29uZm9ybWFuY2UtY2hhbGxlbmdlcyIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2hhbGxlbmdlcyB3aXRoIEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyBDb25mb3JtYW5jZSBhbmQgVGVzdGluZywgYW5kIEFwcHJvYWNoZXMgZm9yIE1pdGlnYXRpbmcgVGhlbSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDIwIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDU1MgU25hcHNob3QgMjAyMCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDIxIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDU1MgU25hcHNob3QgMjAyMSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDIyIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDU1MgU25hcHNob3QgMjAyMiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdC1ydWxlcy1mb3JtYXQtMS4xIiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBY2Nlc3NpYmlsaXR5IENvbmZvcm1hbmNlIFRlc3RpbmcgKEFDVCkgUnVsZXMgRm9ybWF0IDEuMSIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucz9lbWJlZD0xJnBhZ2U9MSZpdGVtcz0xMDAiCiAgICAgICAgfSwKICAgICAgICAiZmlyc3QiOiB7CiAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucz9lbWJlZD0xJnBhZ2U9MSZpdGVtcz0xMDAiCiAgICAgICAgfSwKICAgICAgICAibGFzdCI6IHsKICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zP2VtYmVkPTEmcGFnZT0xNyZpdGVtcz0xMDAiCiAgICAgICAgfSwKICAgICAgICAibmV4dCI6IHsKICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zP2VtYmVkPTEmcGFnZT0yJml0ZW1zPTEwMCIKICAgICAgICB9CiAgICB9LAogICAgIl9lbWJlZGRlZCI6IHsKICAgICAgICAic3BlY2lmaWNhdGlvbnMiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL05PVEUtQVMiLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPkFjdGlvbiBzaGVldHMgcHJvdmlkZSBhIG1lY2hhbmlzbSBmb3Igc2VwYXJhdGlvbiBvZiBldmVudC1iYXNlZCBiZWhhdmlvciAgZnJvbSB0aGUgc3RydWN0dXJlIG9mIEhUTUwgIGFuZCBYTUwgIGRvY3VtZW50cy4gVGhpcyBpcyBzaW1pbGFyIHRvIHRoZSAgd2F5IGluIHdoaWNoIHN0eWxlIHNoZWV0cyBwcm92aWRlIGEgc2VwYXJhdGlvbiBiZXR3ZWVuIHZpc3VhbCBwcmVzZW50YXRpb24gIHByb3BlcnRpZXMgYW5kIGRvY3VtZW50IHN0cnVjdHVyZS4gPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWN0aW9uIFNoZWV0czogQSBNb2R1bGFyIFdheSBvZiBEZWZpbmluZyBCZWhhdmlvciBmb3IgWE1MIGFuZCBIVE1MIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiQVMiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FTIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FTL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9BUy92ZXJzaW9ucy8xOTk4MDYxOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQVMvdmVyc2lvbnMvMTk5ODA2MTkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9BUyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSLzE5OTgvTk9URS1jb21wYWN0SFRNTC0xOTk4MDIwOSIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhlIEludGVybmV0IGluZnJhc3RydWN0dXJlIGhhcyBiZWVuIGRldmVsb3BlZCBhbGwgb3ZlciB0aGUgd29ybGQsICBhbmQgbm93YWRheXMgdGhlcmUgYXJlIGEgdmFyaWV0eSBvZiBkZXZpY2VzIGVxdWlwcGVkIHdpdGggdGhlIEludGVybmV0LWFjY2VzcyBmdW5jdGlvbiwgZnJvbSBUViBzZXRzIHRvIHdpcmVsZXNzIGNlbGx1bGFyIHBob25lcy4gVGhlIEh5cGVyVGV4dCBNYXJrdXAgTGFuZ3VhZ2UgKEhUTUwpIGlzIHdpZGVseSBhY2NlcHRlZCBhbmQgc3ByZWFkIGFzIHRoZSBzdGFuZGFyZCBvZiB0aGUgV1dXKFdvcmxkIFdpZGUgV2ViKSBkb2N1bWVudCBmb3JtYXQuICBUaGUgXCJDb21wYWN0IEhUTUxcIiBwcm9wb3NlZCBoZXJlIGRlZmluZXMgYSBzdWJzZXQgb2YgSFRNTCBmb3Igc21hbGwgaW5mb3JtYXRpb24gYXBwbGlhbmNlcyBzdWNoIGFzIHNtYXJ0IHBob25lcywgc21hcnQgY29tbXVuaWNhdG9ycywgbW9iaWxlIFBEQXMsIGFuZCBldGMuIFN1Y2ggYSBjZXJ0YWluIGxldmVsIG9mIEhUTUwgaXMgc3Ryb25nbHkgcmVxdWlyZWQgYXMgYSBndWlkZWxpbmUgZnJvbSB0aGUgbWFudWZhY3R1cmVycyBvZiBzbWFsbCBpbmZvcm1hdGlvbiBkZXZpY2VzLCAgc2VydmljZSBwcm92aWRlcnMsIGNhcnJpZXJzLCBhbmQgc29mdHdhcmUgZGV2ZWxvcGVycy4gU2luY2UgXCJDb21wYWN0IEhUTUxcIiBpcyBjb21wbGV0ZWx5IGJhc2VkIG9uIHRoZSBIVE1MIHJlY29tbWVuZGF0aW9ucywgd2UgY2FuIHVzZSBtaWxsaW9ucyBvZiBIVE1MLWJhc2VkIGNvbnRlbnQgcmVzb3VyY2VzLCB2YXJpb3VzIHNvZnR3YXJlIHRvb2xzLCBhbmQgcHVibGljIG1hdGVyaWFscyAodGV4dGJvb2tzLCBtYWdhemluZXMsIGFuZCB3ZWIgaW5mb3JtYXRpb24pLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbXBhY3QgSFRNTCBmb3IgU21hbGwgSW5mb3JtYXRpb24gQXBwbGlhbmNlcyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNvbXBhY3RIVE1MLTE5OTgwMjA5IiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb21wYWN0SFRNTC0xOTk4MDIwOSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb21wYWN0SFRNTC0xOTk4MDIwOS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29tcGFjdEhUTUwtMTk5ODAyMDkvdmVyc2lvbnMvMTk5ODAyMDkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbXBhY3RIVE1MLTE5OTgwMjA5L3ZlcnNpb25zLzE5OTgwMjA5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY29tcGFjdEhUTUwiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9BVEFHMTAvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHNwZWNpZmljYXRpb24gcHJvdmlkZXMgZ3VpZGVsaW5lcyBmb3IgV2ViIGF1dGhvcmluZyB0b29sIGRldmVsb3BlcnMuIEl0cyBwdXJwb3NlIGlzIHR3by1mb2xkOiB0byBhc3Npc3QgZGV2ZWxvcGVycyBpbiBkZXNpZ25pbmcgYXV0aG9yaW5nIHRvb2xzIHRoYXQgcHJvZHVjZSBhY2Nlc3NpYmxlIFdlYiBjb250ZW50IGFuZCB0byBhc3Npc3QgZGV2ZWxvcGVycyBpbiBjcmVhdGluZyBhbiBhY2Nlc3NpYmxlIGF1dGhvcmluZyBpbnRlcmZhY2UuPC9wPiA8cD5BdXRob3JpbmcgdG9vbHMgY2FuIGVuYWJsZSwgZW5jb3VyYWdlLCBhbmQgYXNzaXN0IHVzZXJzIChcImF1dGhvcnNcIikgaW4gdGhlIGNyZWF0aW9uIG9mIGFjY2Vzc2libGUgV2ViIGNvbnRlbnQgdGhyb3VnaCBwcm9tcHRzLCBhbGVydHMsIGNoZWNraW5nIGFuZCByZXBhaXIgZnVuY3Rpb25zLCBoZWxwIGZpbGVzIGFuZCBhdXRvbWF0ZWQgdG9vbHMuIEl0IGlzIGp1c3QgYXMgaW1wb3J0YW50IHRoYXQgYWxsIHBlb3BsZSBiZSBhYmxlIHRvIGF1dGhvciBjb250ZW50IGFzIGl0IGlzIGZvciBhbGwgcGVvcGxlIHRvIGhhdmUgYWNjZXNzIHRvIGl0LiBUaGUgdG9vbHMgdXNlZCB0byBjcmVhdGUgdGhpcyBpbmZvcm1hdGlvbiBtdXN0IHRoZXJlZm9yZSBiZSBhY2Nlc3NpYmxlIHRoZW1zZWx2ZXMuIEFkb3B0aW9uIG9mIHRoZXNlIGd1aWRlbGluZXMgd2lsbCBjb250cmlidXRlIHRvIHRoZSBwcm9saWZlcmF0aW9uIG9mIFdlYiBjb250ZW50IHRoYXQgY2FuIGJlIHJlYWQgYnkgYSBicm9hZGVyIHJhbmdlIG9mIHJlYWRlcnMgYW5kIGF1dGhvcmluZyB0b29scyB0aGF0IGNhbiBiZSB1c2VkIGJ5IGEgYnJvYWRlciByYW5nZSBvZiBhdXRob3JzLjwvcD4gPHA+VGhpcyBkb2N1bWVudCBpcyBwYXJ0IG9mIGEgc2VyaWVzIG9mIGFjY2Vzc2liaWxpdHkgZG9jdW1lbnRzIHB1Ymxpc2hlZCBieSB0aGUgPGFiYnI+VzNDPC9hYmJyPiBXZWIgQWNjZXNzaWJpbGl0eSBJbml0aWF0aXZlICg8YWJicj5XQUk8L2FiYnI+KS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBdXRob3JpbmcgVG9vbCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMS4wIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiQVRBRzEwIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FUQUcxMCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9BVEFHMTAvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FUQUcxMC92ZXJzaW9ucy8xOTk4MTExMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQVRBRzEwL3ZlcnNpb25zLzIwMDAwMjAzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL0FUQUciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9OT1RFLWF1dGhlbnRmb3JtIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIG5vdGUgcHJvcG9zZXMgYSBuZXcgSFRNTCBjYXBhYmlsaXR5IHRvIGFpZCBpbiB0aGUgZGV2ZWxvcG1lbnQgb2YgYXV0aGVudGljYXRlZCB3ZWIgdXNlciBpbnRlcmZhY2VzLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIlVzZXIgQWdlbnQgQXV0aGVudGljYXRpb24gRm9ybXMiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhdXRoZW50Zm9ybSIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXV0aGVudGZvcm0iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXV0aGVudGZvcm0vdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2F1dGhlbnRmb3JtL3ZlcnNpb25zLzE5OTkwMjAzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hdXRoZW50Zm9ybS92ZXJzaW9ucy8xOTk5MDIwMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2F1dGhlbnRmb3JtIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQ1NTMS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgc3BlY2lmaWVzIGxldmVsIDEgb2YgdGhlIENhc2NhZGluZyBTdHlsZSBTaGVldCBtZWNoYW5pc20gKENTUzEpLiBDU1MxIGlzIGEgc2ltcGxlIHN0eWxlIHNoZWV0IG1lY2hhbmlzbSB0aGF0IGFsbG93cyBhdXRob3JzIGFuZCByZWFkZXJzIHRvIGF0dGFjaCBzdHlsZSAoZS5nLiBmb250cywgY29sb3JzIGFuZCBzcGFjaW5nKSB0byBIVE1MIGRvY3VtZW50cy4gVGhlIENTUzEgbGFuZ3VhZ2UgaXMgaHVtYW4gcmVhZGFibGUgYW5kIHdyaXRhYmxlLCBhbmQgZXhwcmVzc2VzIHN0eWxlIGluIGNvbW1vbiBkZXNrdG9wIHB1Ymxpc2hpbmcgdGVybWlub2xvZ3kuPC9wPjxwPk9uZSBvZiB0aGUgZnVuZGFtZW50YWwgZmVhdHVyZXMgb2YgQ1NTIGlzIHRoYXQgc3R5bGUgc2hlZXRzIGNhc2NhZGU7IGF1dGhvcnMgY2FuIGF0dGFjaCBhIHByZWZlcnJlZCBzdHlsZSBzaGVldCwgd2hpbGUgdGhlIHJlYWRlcm1heSBoYXZlIGEgcGVyc29uYWwgc3R5bGUgc2hlZXQgdG8gYWRqdXN0IGZvciBodW1hbiBvciB0ZWNobm9sb2dpY2FsIGhhbmRpY2Fwcy4gVGhlIHJ1bGVzIGZvciByZXNvbHZpbmcgY29uZmxpY3RzIGJldHdlZW4gZGlmZmVyZW50IHN0eWxlIHNoZWV0cyBhcmUgZGVmaW5lZCBpbiB0aGlzIHNwZWNpZmljYXRpb24uPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cywgbGV2ZWwgMSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkNTUzEiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NTUzEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NTMS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NTMS92ZXJzaW9ucy8xOTk1MTExNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NTMS92ZXJzaW9ucy8yMDE4MDkxMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NzcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL1dELWFjc3MiLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIHN0eWxlIHNoZWV0IHByb3BlcnRpZXMgZm9yIHJlbmRlcmluZyBXZWIgZG9jdW1lbnRzIGFzIHN5bnRoZXNpemVkIHNwZWVjaC4gVXNpbmcgc3R5bGUgc2hlZXRzIHJhdGhlciB0aGFuIEhUTUwgdGFnIGV4dGVuc2lvbnMgYWxsb3dzIHRoZSBzYW1lIGRvY3VtZW50IHRvIGJlIHJlYWQgd2l0aCB2aXN1YWwsIGF1cmFsLCBvciBtdWxpdG1vZGFsIHByZXNlbnRhdGlvbiB3aXRob3V0IGNsdXR0ZXJpbmcgdXAgdGhlIGRvY3VtZW50IG9yIGhhdmluZyB0byBwcm9kdWNlIHRocmVlIChvciBtb3JlKSBzZXBhcmF0ZSBwYXJhbGxlbCBkb2N1bWVudHMgLSB3aGljaCBoYXMgYmVlbiBzaG93biB0byByZXN1bHQgaW4gY29uc2lzdGVuY3kgYW5kIHVwZGF0ZSBwcm9ibGVtcy4gVGhpcyBhcHByb2FjaCBwcm92aWRlcyBncmVhdGx5IGltcHJvdmVkIGRvY3VtZW50IGFjY2Vzc2liaWxpdHkgZm9yIHZpc3VhbGx5IGRpc2FibGVkIHBlb3BsZSAodGhlIGluZm9ybWF0aW9uIGlzIGJldHRlciBwcmVzZW50ZWQgYW5kIGlzIGp1c3QgYXMgdXAtdG8tZGF0ZSBhcyB0aGUgdmlzdWFsIHZlcnNpb24pIHdpdGhvdXQgcmVxdWlyaW5nIGNvbXByb21pc2VzIGluIHRoZSB2aXN1YWwgZGVzaWduIG9mIHRoZSBkb2N1bWVudC48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBdXJhbCBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChBQ1NTKSBTcGVjaWZpY2F0aW9uIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiV0QtYWNzcyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvV0QtYWNzcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9XRC1hY3NzL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9XRC1hY3NzL3ZlcnNpb25zLzE5OTkwOTAyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9XRC1hY3NzL3ZlcnNpb25zLzE5OTkwOTAyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYWNzcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2JlY3NzLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+QmVoYXZpb3JhbCBFeHRlbnNpb25zIHByb3ZpZGUgYSB3YXkgdG8gbGluayB0byBiaW5kaW5nIHRlY2hub2xvZ2llcywgc3VjaCBhcyBYQkwsIGZyb20gQ1NTIHN0eWxlIHNoZWV0cy4gVGhpcyBhbGxvd3MgYmluZGluZ3MgdG8gYmUgc2VsZWN0ZWQgdXNpbmcgdGhlIENTUyBjYXNjYWRlLCBhbmQgdGh1cyBlbmFibGVzIGJpbmRpbmdzIHRvIHRyYW5zcGFyZW50bHkgYmVuZWZpdCBmcm9tIHRoZSB1c2VyIHN0eWxlIHNoZWV0IG1lY2hhbmlzbSwgbWVkaWEgc2VsZWN0aW9uLCBhbmQgYWx0ZXJuYXRlIHN0eWxlIHNoZWV0cy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJCZWhhdmlvcmFsIEV4dGVuc2lvbnMgdG8gQ1NTIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYmVjc3MiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2Rldi53My5vcmcvMjAwNi94YmwyL2Nzcy1tb2R1bGUuaHRtbCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYmVjc3MiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYmVjc3MvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2JlY3NzL3ZlcnNpb25zLzE5OTkwODA0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iZWNzcy92ZXJzaW9ucy8yMDE0MTAxNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2JlY3NzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2hhcm1vZC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgQXJjaGl0ZWN0dXJhbCBTcGVjaWZpY2F0aW9uIHByb3ZpZGVzIGF1dGhvcnMgb2Ygc3BlY2lmaWNhdGlvbnMsIHNvZnR3YXJlIGRldmVsb3BlcnMsIGFuZCBjb250ZW50IGRldmVsb3BlcnMgd2l0aCBhIGNvbW1vbiByZWZlcmVuY2UgZm9yIGludGVyb3BlcmFibGUgdGV4dCBtYW5pcHVsYXRpb24gb24gdGhlIFdvcmxkIFdpZGUgV2ViLCBidWlsZGluZyBvbiB0aGUgVW5pdmVyc2FsIENoYXJhY3RlciBTZXQsIGRlZmluZWQgam9pbnRseSBieSB0aGUgVW5pY29kZSBTdGFuZGFyZCBhbmQgSVNPL0lFQyAxMDY0Ni4gVG9waWNzIGFkZHJlc3NlZCBpbmNsdWRlIHVzZSBvZiB0aGUgdGVybXMgJzxzcGFuPmNoYXJhY3Rlcjwvc3Bhbj4nLCAnPHNwYW4+ZW5jb2Rpbmc8L3NwYW4+JyBhbmQgJzxzcGFuPnN0cmluZzwvc3Bhbj4nLCBhIHJlZmVyZW5jZSBwcm9jZXNzaW5nIG1vZGVsLCBjaG9pY2UgYW5kIGlkZW50aWZpY2F0aW9uIG9mIGNoYXJhY3RlciBlbmNvZGluZ3MsIGNoYXJhY3RlciBlc2NhcGluZywgYW5kIHN0cmluZyBpbmRleGluZy48L3A+IDxwPkZvciBub3JtYWxpemF0aW9uIGFuZCBzdHJpbmcgaWRlbnRpdHkgbWF0Y2hpbmcsIHNlZSB0aGUgY29tcGFuaW9uIGRvY3VtZW50IDxjaXRlPkNoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViIDEuMDogTm9ybWFsaXphdGlvbjwvY2l0ZT4gW0NoYXJOb3JtXS4gRm9yIHJlc291cmNlIGlkZW50aWZpZXJzLCBzZWUgdGhlIGNvbXBhbmlvbiBkb2N1bWVudCA8Y2l0ZT5DaGFyYWN0ZXIgTW9kZWwgZm9yIHRoZSBXb3JsZCBXaWRlIFdlYiAxLjA6IFJlc291cmNlIElkZW50aWZpZXJzPC9jaXRlPiBbQ2hhcklSSV0uPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2hhcmFjdGVyIE1vZGVsIGZvciB0aGUgV29ybGQgV2lkZSBXZWIgMS4wOiBGdW5kYW1lbnRhbHMiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjaGFybW9kIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJtb2QiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcm1vZC92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcm1vZC92ZXJzaW9ucy8xOTk5MDIyNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcm1vZC92ZXJzaW9ucy8yMDA1MDIxNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZWNvbW1lbmRhdGlvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jaGFybW9kIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2hhcmNvbCIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+QW4gWE1MIHN5bnRheCBmb3IgZGVzY3JpYmluZyBjb2xsZWN0aW9ucyBvZiBjaGFyYWN0ZXJzIGlzIHByb3Bvc2VkLiBUaGlzIHdpbGwgYWxsb3cgdG8gcmVmZXJlbmNlIGNoYXJhY3RlciBjb2xsZWN0aW9ucyB3aXRoIFVSSXMgYW5kIHRodXMgdG8gcmVmZXJlbmNlIHRoZW0gZnJvbSBvdGhlciBwcm90b2NvbHMgYW5kIGZvcm1hdHMuIFRoZSBtYWluIHVzYWdlIGFyZWFzIGZvciBjaGFyYWN0ZXIgY29sbGVjdGlvbnMgYXJlIHNjaGVtYXMsIGZvcm1zLCBhbmQgc3R5bGVzaGVldHMuIFNldmVyYWwgY29uc3RydWN0cywgaW4gcGFydGljdWxhciBrZXJuZWxzLCBodWxscywgYW5kIGFsdGVybmF0aXZlcywgYXJlIHByb3ZpZGVkIHRvIGFsbG93IGluY29tcGxldGUgc3BlY2lmaWNhdGlvbnMgYW5kIHRvIGluY3JlYXNlIG5ldHdvcmsgZWZmaWNpZW5jeS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBIE5vdGF0aW9uIGZvciBDaGFyYWN0ZXIgQ29sbGVjdGlvbnMgZm9yIHRoZSBXV1ciLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjaGFyY29sIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jaGFyY29sIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJjb2wvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJjb2wvdmVyc2lvbnMvMjAwMDAxMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJjb2wvdmVyc2lvbnMvMjAwMDAxMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jaGFyY29sIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQUVSVC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIHRlY2huaXF1ZXMgdGhhdCBXZWIgYWNjZXNzaWJpbGl0eSB2YWxpZGF0aW9uIHRvb2xzIG1heSB1c2UgdG8gZXZhbHVhdGUgdGhlIGNvbmZvcm1hbmNlIG9mIEhUTUwgZG9jdW1lbnRzIHRvIHRoZSBXZWIgQ29udGVudCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgMS4wIChXQ0FHIDEuMCkuIFRoaXMgZG9jdW1lbnQgYWxzbyBkZXNjcmliZXMgdGVjaG5pcXVlcyB0aGF0IFdlYiBhdXRob3JpbmcgdG9vbHMgbWF5IHVzZSB0byBoZWxwIGF1dGhvcnMgbW9kaWZ5IEhUTUwgZG9jdW1lbnRzIHRvIGNvbmZvcm0gdG8gV0NBRyAxLjAuIFdlIGFudGljaXBhdGUgdGhhdCB0b29sIGRldmVsb3BlcnMgbWF5IGRldmVsb3AgYWNjZXNzaWJpbGl0eSB2YWxpZGF0aW9uIGFuZC9vciByZXBhaXIgbW9kdWxlcyB0byBiZSBpbmNvcnBvcmF0ZWQgaW50byBjb21tZXJjaWFsIGF1dGhvcmluZyB0b29scywgdmFsaWRhdGlvbiB0b29scywgYW5kIHBlcmhhcHMgdXNlciBhZ2VudHMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiVGVjaG5pcXVlcyBGb3IgQWNjZXNzaWJpbGl0eSBFdmFsdWF0aW9uIEFuZCBSZXBhaXIgVG9vbHMiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJBRVJUIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9BRVJUIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FFUlQvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FFUlQvdmVyc2lvbnMvMjAwMDA0MjYiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FFUlQvdmVyc2lvbnMvMjAwMDA0MjYiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9BRVJUIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQ0NQUC1yYS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgb3V0bGluZXMgdGhlIHJlcXVpcmVtZW50cyBmb3IgYSBDQy9QUCBmcmFtZXdvcmssIHZvY2FidWxhcnksIGFuZCB0cnVzdCBtb2RlbCwgYW5kIHByb3ZpZGVzIGFuIG92ZXJ2aWV3IG9mIGFuIGFyY2hpdGVjdHVyZSB0aGF0IHNhdGlzZmllcyB0aGVzZSByZXF1aXJlbWVudHMuIEl0IHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgY29uc2Vuc3VzIG9mIHRoZSB3b3JraW5nIGdyb3VwLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbXBvc2l0ZSBDYXBhYmlsaXRpZXMvUHJlZmVyZW5jZSBQcm9maWxlczogUmVxdWlyZW1lbnRzIGFuZCBBcmNoaXRlY3R1cmUiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJDQ1BQLXJhIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DQ1BQLXJhIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtcmEvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtcmEvdmVyc2lvbnMvMjAwMDAyMjgiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtcmEvdmVyc2lvbnMvMjAwMDA3MjEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9DQ1BQLXJhIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQ0NQUC10YS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgY29udGFpbnMgdGVybWlub2xvZ3kgYW5kIGFiYnJldmlhdGlvbnMgdGhhdCBhcmUgdXNlZCBpbiBvdGhlciBDQy9QUCBkb2N1bWVudHMuIEZvciBhIGRldGFpbGVkIGRlc2NyaXB0aW9uIG9mIENDL1BQLCBwbGVhc2Ugc2VlIFtDQy9QUF0uPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29tcG9zaXRlIENhcGFiaWxpdGllcy9QcmVmZXJlbmNlIFByb2ZpbGVzOiBUZXJtaW5vbG9neSBhbmQgQWJicmV2aWF0aW9ucyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkNDUFAtdGEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtdGEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0NQUC10YS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0NQUC10YS92ZXJzaW9ucy8yMDAwMDcyMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0NQUC10YS92ZXJzaW9ucy8yMDAwMDcyMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL0NDUFAtdGEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9DQ1BQLUNPT1JESU5BVElPTi8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIGhvdyBleGlzdGluZyB2b2NhYnVsYXJpZXMgZm9yIGRpZmZlcmVudCBjbGFzc2VzIG9mIGRldmljZXMgYW5kIHVzZXIgYWdlbnRzIGNhbiBiZSB1c2VkIGluIENDL1BQIGNvbXBvbmVudHMsIGFuZCBob3cgdG8gY3JlYXRlIHNjaGVtYXMgdGhhdCBlbmNhcHN1bGF0ZSBleGlzdGluZyB2b2NhYnVsYXJpZXMuIEl0IGRpc2N1c3NlcyB0aGUgcmVzdWx0cyBvZiB0aGUgY29vcmRpbmF0aW9uIHdpdGggdGhlIElFVEYgQ09OTkVHIFdvcmtpbmcgR3JvdXAsIGFzIHdlbGwgYXMgdGhlIFdBUCBGb3J1bSBVQVBST0YgV29ya2luZyBHcm91cCBhbmQgc2V2ZXJhbCBvdGhlciBncm91cHMsIHdoaWNoIGhhdmUgcmVsYXRlZCBhY3Rpdml0aWVzLiBJdCBjb250YWlucyBhIG51bWJlciBvZiBzY2hlbWFzIGFuZCBzb2Z0d2FyZSBleGFtcGxlcyB3aGljaCBoYXMgYmVlbiBjb250cmlidXRlZCB2b2x1bnRhcmlseSBieSBpbmRpdmlkdWFscy48L3A+IDxwPkl0IGFsc28gZ2l2ZXMgYW4gZXhhbXBsZSBvZiBoZXVyaXN0aWNzLCB3aGljaCBjYW4gYmUgdXNlZCB0byBhZGFwdCBjb250ZW50IHRvIGEgQ0MvUFAgcHJvZmlsZSwgdGh1cyBnaXZpbmcgc29tZSBndWlkZWxpbmVzIGZvciB0aG9zZSB3aG8gd2FudCB0byB1c2UgQ0MvUFAgdG8gaW1wbGVtZW50IGNvbnRlbnQgYWRhcHRhdGlvbi4gSXQgYWxzbyBzZXJ2ZXMgdG8gcHJvdmlkZSB2b2NhYnVsYXJ5IGFuZCBzY2hlbWEgZGVzaWduZXJzIHdpdGgga2V5IGd1aWRlbGluZXMgcmVnYXJkaW5nIGV4dGVuc2lvbnMgdG8gZXhpc3Rpbmcgdm9jYWJ1bGFyaWVzIG9yIGRldmVsb3BtZW50IG9mIG5ldyBvbmVzLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNDL1BQIEltcGxlbWVudG9ycyBHdWlkZTogSGFybW9uaXphdGlvbiB3aXRoIEV4aXN0aW5nIFZvY2FidWxhcmllcyBhbmQgQ29udGVudCBUcmFuc2Zvcm1hdGlvbiBIZXVyaXN0aWNzIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiQ0NQUC1DT09SRElOQVRJT04iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtQ09PUkRJTkFUSU9OIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtQ09PUkRJTkFUSU9OL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DQ1BQLUNPT1JESU5BVElPTi92ZXJzaW9ucy8yMDAxMTIyMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0NQUC1DT09SRElOQVRJT04vdmVyc2lvbnMvMjAwMTEyMjAiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9DQ1BQLUNPT1JESU5BVElPTiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL0NDUFAtdHJ1c3QvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IGdpdmVzIGltcGxlbWVudG9ycyBhZHZpY2Ugb24gaG93IHRvIHByb3RlY3QgdGhlIHByaXZhY3kgb2YgYSBDQy9QUCB1c2VyLCBhbmQgb3V0bGluZXMgaG93IHRoaXMgY2FuIGJlIGFwcGxpZWQgdXNpbmcgUDNQIGluIEhUVFAgd2l0aCB0aGUgQ0MvUFAgRXhjaGFuZ2UgcHJvdG9jb2wuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ0MvUFAgSW1wbGVtZW50b3JzIEd1aWRlOiBQcml2YWN5IGFuZCBQcm90b2NvbHMiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJDQ1BQLXRydXN0IiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DQ1BQLXRydXN0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtdHJ1c3QvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtdHJ1c3QvdmVyc2lvbnMvMjAwMTEyMjAiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NDUFAtdHJ1c3QvdmVyc2lvbnMvMjAwMTEyMjAiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9DQ1BQLXRydXN0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2FsbC1jb250cm9sLXJlcXMvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IGRlc2NyaWJlcyByZXF1aXJlbWVudHMgZm9yIG1lY2hhbmlzbXMgdGhhdCBlbmFibGUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb2Ygc3BlZWNoIChzaWduYWwgcHJvY2Vzc2luZykgcmVzb3VyY2VzIGFuZCB0ZWxlcGhvbnkgcmVzb3VyY2VzIGluIGEgVm9pY2VYTUwgdGVsZXBob255IHBsYXRmb3JtLiBUaGUgc2NvcGUgb2YgdGhlc2UgbGFuZ3VhZ2UgZmVhdHVyZXMgaXMgZm9yIGNvbnRyb2xsaW5nIHJlc291cmNlcyBpbiBhIHBsYXRmb3JtIG9uIHRoZSBuZXR3b3JrIGVkZ2UsIG5vdCBmb3IgYnVpbGRpbmcgbmV0d29yay1iYXNlZCBjYWxsIHByb2Nlc3NpbmcgYXBwbGljYXRpb25zIGluIGEgdGVsZXBob25lIHN3aXRjaGluZyBzeXN0ZW0sIG9yIGZvciBjb250cm9sbGluZyBhbiBlbnRpcmUgdGVsZWNvbSBuZXR3b3JrLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNhbGwgQ29udHJvbCBSZXF1aXJlbWVudHMgaW4gYSBWb2ljZSBCcm93c2VyIEZyYW1ld29yayIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNhbGwtY29udHJvbC1yZXFzIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jYWxsLWNvbnRyb2wtcmVxcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jYWxsLWNvbnRyb2wtcmVxcy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2FsbC1jb250cm9sLXJlcXMvdmVyc2lvbnMvMjAwMTA0MTMiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhbGwtY29udHJvbC1yZXFzL3ZlcnNpb25zLzIwMDEwNDEzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY2FsbC1jb250cm9sLXJlcXMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hY2RpLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBkaXNjdXNzZXMgdGhlIGNoYWxsZW5nZXMgdGhhdCBhdXRob3JzIGNvbW1vbmx5IGZhY2Ugd2hlbiBidWlsZGluZyB3ZWIgY29udGVudCBhbmQgYXBwbGljYXRpb25zIHRoYXQgY2FuIGJlIGFjY2Vzc2VkIGJ5IHVzZXJzIHZpYSBhIHdpZGUgdmFyaWV0eSBvZiBkaWZmZXJlbnQgZGV2aWNlcyB3aXRoIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQXV0aG9yaW5nIENoYWxsZW5nZXMgZm9yIERldmljZSBJbmRlcGVuZGVuY2UiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhY2RpIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY2RpIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjZGkvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjZGkvdmVyc2lvbnMvMjAwMjEwMTgiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjZGkvdmVyc2lvbnMvMjAwMzA5MDEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9hY2RpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2N4bWwvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD4gVGhlIENhbGwgQ29udHJvbCBFeHRlbnNpYmxlIE1hcmt1cCBMYW5ndWFnZSAoQ0NYTUwpIHByb3ZpZGVzIGRlY2xhcmF0aXZlIG1hcmt1cCB0byBkZXNjcmliZSB0ZWxlcGhvbnkgY2FsbCBjb250cm9sLiBDQ1hNTCBjYW4gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGEgZGlhbG9nIHN5c3RlbSBzdWNoIGFzIFZvaWNlWE1MLiA8L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJWb2ljZSBCcm93c2VyIENhbGwgQ29udHJvbDogQ0NYTUwgVmVyc2lvbiAxLjAiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjY3htbCIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMS4wIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jY3htbCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jY3htbC92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2N4bWwvdmVyc2lvbnMvMjAwMjAyMjEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NjeG1sL3ZlcnNpb25zLzIwMTEwNzA1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NjeG1sIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2hpcHMiLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgaXMgYSBzZXQgb2YgZ29vZCBwcmFjdGljZXMgdG8gaW1wcm92ZSBpbXBsZW1lbnRhdGlvbnMgb2YgPGFjcm9ueW0gdGl0bGU9XCJ0aGUgSHlwZXJ0ZXh0IFRyYW5zZmVyIFByb3RvY29sXCI+SFRUUDwvYWNyb255bT4gYW5kIHJlbGF0ZWQgc3RhbmRhcmRzIGFzIHdlbGwgYXMgdGhlaXIgdXNlLiBJdCBleHBsYWlucyBhIGZldyBiYXNpYyBjb25jZXB0cywgcG9pbnRzIG91dCBjb21tb24gbWlzdGFrZXMgIGFuZCBtaXNiZWhhdmlvcnMsIGFuZCBzdWdnZXN0cyBcImJlc3QgcHJhY3RpY2VzXCIuPC9wPjxwPlRoaXMgZG9jdW1lbnQgZG9lcyA8c3Ryb25nPm5vdDwvc3Ryb25nPiBpbmNyaW1pbmF0ZSBhbnkgc3BlY2lmaWMgcHJvZHVjdC4gIFczQyBkb2VzIG5vdCB0cmFjayBidWdzIG9yIGVycm9ycyBpbiBpbXBsZW1lbnRhdGlvbnMuIFRoYXQgaW5mb3JtYXRpb24gaXMgZ2VuZXJhbGx5IHRyYWNrZWQgYnkgdGhlIHZlbmRvcnMgdGhlbXNlbHZlcywgIG9yIHRoaXJkIHBhcnRpZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29tbW9uIEhUVFAgSW1wbGVtZW50YXRpb24gUHJvYmxlbXMiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjaGlwcyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hpcHMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hpcHMvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoaXBzL3ZlcnNpb25zLzIwMDMwMTI4IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jaGlwcy92ZXJzaW9ucy8yMDAzMDEyOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NoaXBzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQVRBRzIwLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBzcGVjaWZpY2F0aW9uIHByb3ZpZGVzIGd1aWRlbGluZXMgZm9yIGRlc2lnbmluZyBXZWIgY29udGVudCBhdXRob3JpbmcgdG9vbHMgdGhhdCBhcmUgbW9yZSBhY2Nlc3NpYmxlIGZvciBwZW9wbGUgd2l0aCBkaXNhYmlsaXRpZXMuIEFuIGF1dGhvcmluZyB0b29sIHRoYXQgY29uZm9ybXMgdG8gdGhlc2UgZ3VpZGVsaW5lcyB3aWxsIHByb21vdGUgYWNjZXNzaWJpbGl0eSBieSBwcm92aWRpbmcgYW4gYWNjZXNzaWJsZSB1c2VyIGludGVyZmFjZSB0byBhdXRob3JzIHdpdGggZGlzYWJpbGl0aWVzIGFzIHdlbGwgYXMgZW5hYmxpbmcsIHN1cHBvcnRpbmcsIGFuZCBwcm9tb3RpbmcgdGhlIHByb2R1Y3Rpb24gb2YgYWNjZXNzaWJsZSBXZWIgY29udGVudCBieSBhbGwgYXV0aG9ycy48L3A+PHA+VGhlIFwiQXV0aG9yaW5nIFRvb2wgQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIDIuMFwiICg8YWNyb255bT5BVEFHPC9hY3JvbnltPiAyLjApIGlzIHBhcnQgb2YgYSBzZXJpZXMgb2YgYWNjZXNzaWJpbGl0eSBndWlkZWxpbmVzIHB1Ymxpc2hlZCBieSB0aGUgPGFjcm9ueW0+VzNDPC9hY3JvbnltPiBXZWIgQWNjZXNzaWJpbGl0eSBJbml0aWF0aXZlICg8YWNyb255bT5XQUk8L2Fjcm9ueW0+KS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBdXRob3JpbmcgVG9vbCBBY2Nlc3NpYmlsaXR5IEd1aWRlbGluZXMgKEFUQUcpIDIuMCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkFUQUcyMCIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vd3d3LnczLm9yZy9XQUkvQVUvQVRBRzIwLyIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMi4wIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9BVEFHMjAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQVRBRzIwL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9BVEFHMjAvdmVyc2lvbnMvMjAwMzAzMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0FUQUcyMC92ZXJzaW9ucy8yMDE1MDkyNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZWNvbW1lbmRhdGlvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzdXBlcnNlZGVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQVRBRzIwL3N1cGVyc2VkZXMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvQVRBRyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NwYy1yZXEvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IHNldHMgb3V0IHRoZSByZXF1aXJlbWVudHMgZm9yIGRlZmluaW5nIGNvcmUgcHJlc2VudGF0aW9uIGNoYXJhY3RlcmlzdGljcyB0aGF0IHByb3ZpZGUgYSBjb21tb24gc2V0IG9mIHByb3BlcnR5IGRlZmluaXRpb25zIG9mIGRldmljZXMgcHJlc2VudGF0aW9uIGNhcGFiaWxpdGllcy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb3JlIFByZXNlbnRhdGlvbiBDaGFyYWN0ZXJpc3RpY3M6wqBSZXF1aXJlbWVudHMgYW5kIFVzZSBDYXNlcyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNwYy1yZXEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NwYy1yZXEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3BjLXJlcS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3BjLXJlcS92ZXJzaW9ucy8yMDAzMDUxMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3BjLXJlcS92ZXJzaW9ucy8yMDAzMDUxMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NwYy1yZXEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jaGFybW9kLXJlc2lkLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+QXJjaGl0ZWN0dXJhbCBTcGVjaWZpY2F0aW9uIHByb3ZpZGluZyBhdXRob3JzIG9mIHNwZWNpZmljYXRpb25zLCBzb2Z0d2FyZSBkZXZlbG9wZXJzLCBhbmQgY29udGVudCBkZXZlbG9wZXJzIHdpdGggYSBjb21tb24gcmVmZXJlbmNlIGZvciB0aGUgdXNlIG9mIHJlc291cmNlIGlkZW50aWZpZXJzIGJ1aWxkaW5nIG9uIFVuaWNvZGUuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2hhcmFjdGVyIE1vZGVsIGZvciB0aGUgV29ybGQgV2lkZSBXZWIgMS4wOiBSZXNvdXJjZSBJZGVudGlmaWVycyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNoYXJtb2QtcmVzaWQiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcm1vZC1yZXNpZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jaGFybW9kLXJlc2lkL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jaGFybW9kLXJlc2lkL3ZlcnNpb25zLzIwMDQxMTIyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkNhbmRpZGF0ZSBSZWNvbW1lbmRhdGlvbiBTbmFwc2hvdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJtb2QtcmVzaWQvdmVyc2lvbnMvMjAxOTA1MDIiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jaGFybW9kLXJlc2lkIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2hhcm1vZC1ub3JtLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+QXJjaGl0ZWN0dXJhbCBTcGVjaWZpY2F0aW9uIHByb3ZpZGluZyBhdXRob3JzIG9mIHNwZWNpZmljYXRpb25zLCBzb2Z0d2FyZSBkZXZlbG9wZXJzLCBhbmQgY29udGVudCBkZXZlbG9wZXJzIHdpdGggYSBjb21tb24gcmVmZXJlbmNlIGZvciBub3JtYWxpemF0aW9uIGFuZCBzdHJpbmcgaWRlbnRpdHkgbWF0Y2hpbmcgdG8gaW1wcm92ZSBpbnRlcm9wZXJhYmxlIHRleHQgaGFuZGxpbmcgb24gdGhlIFdvcmxkIFdpZGUgV2ViLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNoYXJhY3RlciBNb2RlbCBmb3IgdGhlIFdvcmxkIFdpZGUgV2ViOiBTdHJpbmcgTWF0Y2hpbmciLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjaGFybW9kLW5vcm0iLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vY2hhcm1vZC1ub3JtLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcm1vZC1ub3JtIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJtb2Qtbm9ybS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcm1vZC1ub3JtL3ZlcnNpb25zLzIwMDQwMjI1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jaGFybW9kLW5vcm0vdmVyc2lvbnMvMjAyMTA4MTEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jaGFybW9kLW5vcm0iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc2VsZWN0aW9uLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBzcGVjaWZpZXMgYW4gWE1MLWJhc2VkIHN5bnRheCBhbmQgcHJvY2Vzc2luZyBtb2RlbCBmb3IgZ2VuZXJhbCBwdXJwb3NlIGNvbnRlbnQgc2VsZWN0aW9uIGFuZCBmaWx0ZXJpbmcgdGhhdCBjYW4gYmUgdXNlZCB0byBkZWxpdmVyIGNvbnRlbnQgYWRhcHRlZCB0byBhIHdpZGUgcmFuZ2Ugb2YgZGV2aWNlcy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlbGVjdGlvbiBmb3IgRGV2aWNlIEluZGVwZW5kZW5jZSAoRElTZWxlY3QpIDEuMCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNzZWxlY3Rpb24iLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NlbGVjdGlvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc2VsZWN0aW9uL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc2VsZWN0aW9uL3ZlcnNpb25zLzIwMDQwNjExIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc2VsZWN0aW9uL3ZlcnNpb25zLzIwMTAwNjI5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY3NlbGVjdGlvbiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL0NEUlJlcXMvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD4gVGhpcyBkb2N1bWVudCBkZXNjcmliZXMgdGhlIHVzZSBjYXNlcyBmb3IgYSBmcmFtZXdvcmsgdGhhdCBjb21iaW5lcyBkb2N1bWVudHMgYnkgcmVmZXJlbmNlIGFuZCB0aGUgc2V0IG9mIHJlcXVpcmVtZW50cyBmb3Igc3VjaCBhIGZyYW1ld29yay4gPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29tcG91bmQgRG9jdW1lbnQgYnkgUmVmZXJlbmNlIFVzZSBDYXNlcyBhbmQgUmVxdWlyZW1lbnRzIFZlcnNpb24gMS4wIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiQ0RSUmVxcyIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMS4wIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DRFJSZXFzIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NEUlJlcXMvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NEUlJlcXMvdmVyc2lvbnMvMjAwNTAzMTUiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NEUlJlcXMvdmVyc2lvbnMvMjAwNTEyMTkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9DRFJSZXFzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY29ycy8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVmaW5lcyBhIG1lY2hhbmlzbSB0byBlbmFibGUgY2xpZW50LXNpZGUgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNyb3NzLU9yaWdpbiBSZXNvdXJjZSBTaGFyaW5nIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY29ycyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29ycyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb3JzL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb3JzL3ZlcnNpb25zLzIwMDUwNjEzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb3JzL3ZlcnNpb25zLzIwMjAwNjAyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY29ycyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL0NERlJlcXMvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD4gVGhpcyBkb2N1bWVudCBkZXNjcmliZXMgdGhlIHVzZSBjYXNlcyBmb3IgYSBmcmFtZXdvcmsgdGhhdCBjb21iaW5lcyBkb2N1bWVudHMgYW5kIHRoZSBzZXQgb2YgcmVxdWlyZW1lbnRzIGZvciBzdWNoIGEgZnJhbWV3b3JrLiA8L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb21wb3VuZCBEb2N1bWVudCBVc2UgQ2FzZXMgYW5kIFJlcXVpcmVtZW50cyBWZXJzaW9uIDIuMCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkNERlJlcXMiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjIuMCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0RGUmVxcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DREZSZXFzL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DREZSZXFzL3ZlcnNpb25zLzIwMDUxMjE5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DREZSZXFzL3ZlcnNpb25zLzIwMDUxMjE5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvQ0RGUmVxcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL0NEUi8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPiBUaGlzIGRvY3VtZW50IHNwZWNpZmllcyB0aGUgPGVtPkNvbXBvdW5kIERvY3VtZW50IGJ5IFJlZmVyZW5jZSBGcmFtZXdvcmsgMS4wPC9lbT4uIDwvcD4gPHA+IFdoZW4gY29tYmluaW5nIHNlcGFyYXRlIG1hcmt1cCBsYW5ndWFnZXMsIHNwZWNpZmljIHByb2JsZW1zIGhhdmUgdG8gYmUgcmVzb2x2ZWQgdGhhdCBhcmUgbm90IGFkZHJlc3NlZCBieSB0aGVpciBpbmRpdmlkdWFsIGxhbmd1YWdlIHNwZWNpZmljYXRpb25zLCBzdWNoIGFzIHRoZSBwcm9wYWdhdGlvbiBvZiBldmVudHMgYWNyb3NzIG5hbWVzcGFjZXMsIHRoZSBjb21iaW5hdGlvbiBvZiByZW5kZXJpbmcgb3IgdGhlIHVzZXIgaW50ZXJhY3Rpb24gbW9kZWwuIDwvcD4gPHA+IDxlbT5Db21wb3VuZCBEb2N1bWVudDwvZW0+IGlzIHRoZSBXM0MgdGVybSBmb3IgYSBkb2N1bWVudCB0aGF0IGNvbWJpbmVzIG11bHRpcGxlIGZvcm1hdHMuIDwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbXBvdW5kIERvY3VtZW50IGJ5IFJlZmVyZW5jZSBGcmFtZXdvcmsgMS4wIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiQ0RSIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NEUiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DRFIvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NEUi92ZXJzaW9ucy8yMDA1MTEyMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ0RSL3ZlcnNpb25zLzIwMTAwODE5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvQ0RSIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQzE0Ti1pc3N1ZXMvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHRlY2huaWNhbCBub3RlIGFkZHJlc3NlcyBzb21lIG9mIHRoZSBpc3N1ZXMgcmVsYXRlZCB0byBpbmhlcml0YW5jZSBvZiB0aGUgWE1MIGF0dHJpYnV0ZXMgPGNvZGU+eG1sOmJhc2U8L2NvZGU+IGFuZCA8Y29kZT54bWw6aWQ8L2NvZGU+IGFuZCB0aGUgVzNDIFJlY29tbWVuZGF0aW9uIGZvciBDYW5vbmljYWwgWE1MIFZlcnNpb24gMS4wIFtDMTROMTBdIChFcnJhdGEpLiBTaG9ydGNvbWluZ3Mgb2YgQzE0Ti8xLjAgYXJlIG5vdGVkIG91dCBhbmQgdGhlIHVzZSBvZiBhIG5ldyBDMTROLzEuMSByZWNvbW1lbmRhdGlvbiB3aXRoIHRoZSBYTUwgRGlnaXRhbCBTaWduYXR1cmUgMS4wIFJlY29tbWVuZGF0aW9uIFtYTUxEU0lHXSBpcyBkaXNjdXNzZWQuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiS25vd24gSXNzdWVzIHdpdGggQ2Fub25pY2FsIFhNTCAxLjAgKEMxNE4vMS4wKSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkMxNE4taXNzdWVzIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIxLjAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0MxNE4taXNzdWVzIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0MxNE4taXNzdWVzL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DMTROLWlzc3Vlcy92ZXJzaW9ucy8yMDA2MDkxNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQzE0Ti1pc3N1ZXMvdmVyc2lvbnMvMjAwNjEyMjAiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9DMTROLWlzc3VlcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FyYWJpYy1tYXRoLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+QW5hbHl6ZXMgcG90ZW50aWFsIHByb2JsZW1zIHdpdGggdGhlIHVzZSBvZiBNYXRoTUwgZm9yIHRoZSBwcmVzZW50YXRpb24gb2YgbWF0aGVtYXRpY3MgaW4gdGhlIG5vdGF0aW9ucyBjdXN0b21hcmlseSB1c2VkIHdpdGggQXJhYmljLCBhbmQgcmVsYXRlZCBsYW5ndWFnZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQXJhYmljIG1hdGhlbWF0aWNhbCBub3RhdGlvbiIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFyYWJpYy1tYXRoIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcmFiaWMtbWF0aCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcmFiaWMtbWF0aC92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXJhYmljLW1hdGgvdmVyc2lvbnMvMjAwNjAxMzEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FyYWJpYy1tYXRoL3ZlcnNpb25zLzIwMDYwMTMxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYXJhYmljLW1hdGgiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9iYWNrcGxhbmUvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHBhcGVyIGludHJvZHVjZXMgdGhlIGNvbmNlcHQgb2YgYSBcIlJpY2ggV2ViIEFwcGxpY2F0aW9uIEJhY2twbGFuZVwiIC0tIGEgc2V0IG9mIGNvbW1vbiBidWlsZGluZyBibG9ja3MgZm9yIHdlYiBhcHBsaWNhdGlvbnMuIFdlIGFyZ3VlIHRoYXQgc3VibWlzc2lvbiwgZGF0YSBtb2RlbHMsIG1vZGVsLXZpZXcgYmluZGluZyBhbmQgYmVoYXZpb3IsIGFuZCB3ZWIgY29tcG9uZW50cyBjYW4gcHJvdmlkZSBhIGNvbW1vbiBpbmZyYXN0cnVjdHVyZSBmb3IgbXVsdGlwbGUgbWFya3VwIGZvcm1hdHMuIEZ1cnRoZXIsIHdlIHByb3Bvc2UgYSBjb21tb24gaW5mcmFzdHJ1Y3R1cmUgZm9yIGJvdGggZGVjbGFyYXRpdmUgYW5kIGltcGVyYXRpdmUgd2ViIHByb2dyYW1taW5nIGxhbmd1YWdlcy4gQnkgYWxpZ25pbmcgQVBJcyBhbmQgdGhlaXIgZGVjbGFyYXRpdmUgcmVwcmVzZW50YXRpb25zLCB3ZSBob3BlIHRvIHN1cHBvcnQgYm90aCBpbXBsZW1lbnRhdGlvbiBhcHByb2FjaGVzIGFuZCBpbmNyZWFzZSBpbnRlcm9wZXJhYmlsaXR5IGJldHdlZW4gdGhlbS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSaWNoIFdlYiBBcHBsaWNhdGlvbiBCYWNrcGxhbmUiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJiYWNrcGxhbmUiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2JhY2twbGFuZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iYWNrcGxhbmUvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2JhY2twbGFuZS92ZXJzaW9ucy8yMDA2MTExNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYmFja3BsYW5lL3ZlcnNpb25zLzIwMDYxMTE2IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYmFja3BsYW5lIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2xpcGJvYXJkLWFwaXMvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IGRlc2NyaWJlcyBBUElzIGZvciBhY2Nlc3NpbmcgZGF0YSBvbiB0aGUgc3lzdGVtIGNsaXBib2FyZC4gSXQgcHJvdmlkZXMgb3BlcmF0aW9ucyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdCBjbGlwYm9hcmQgYWN0aW9ucyAoY3V0LCBjb3B5IGFuZCBwYXN0ZSksIGFuZCBmb3IgZGlyZWN0bHkgYWNjZXNzaW5nIHRoZSBjbGlwYm9hcmQgY29udGVudHMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2xpcGJvYXJkIEFQSSBhbmQgZXZlbnRzIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY2xpcGJvYXJkLWFwaXMiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vY2xpcGJvYXJkLWFwaXMvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbGlwYm9hcmQtYXBpcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbGlwYm9hcmQtYXBpcy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xpcGJvYXJkLWFwaXMvdmVyc2lvbnMvMjAwNjExMTUiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NsaXBib2FyZC1hcGlzL3ZlcnNpb25zLzIwMjUwNTE2IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY2xpcGJvYXJkLWFwaXMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc2VsZWN0aW9uLXByaW1lci8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgcHJpbWVyIGlzIGRlc2lnbmVkIHRvIHByb3ZpZGUgdGhlIHJlYWRlciB3aXRoIHRoZSBiYXNpYyBrbm93bGVkZ2UgcmVxdWlyZWQgdG8gbWFrZSBlZmZlY3RpdmUgdXNlIG9mIDxhIGhyZWY9XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc2VsZWN0aW9uL1wiIHNoYXBlPVwicmVjdFwiPkRJU2VsZWN0PC9hPi48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlbGVjdGlvbiBQcmltZXIgMS4wIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NlbGVjdGlvbi1wcmltZXIiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NlbGVjdGlvbi1wcmltZXIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NlbGVjdGlvbi1wcmltZXIvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NzZWxlY3Rpb24tcHJpbWVyL3ZlcnNpb25zLzIwMDYxMDEwIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc2VsZWN0aW9uLXByaW1lci92ZXJzaW9ucy8yMDEwMDYyOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NzZWxlY3Rpb24tcHJpbWVyIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY3NlbGVjdGlvbi14YWYvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IHNwZWNpZmllcyBhIHNldCBvZiBYUGF0aCBmdW5jdGlvbnMgZGVzaWduZWQgZm9yIDxhIGhyZWY9XCJodHRwOi8vd3d3LnczLm9yZy9UUi9jc2VsZWN0aW9uL1wiIHNoYXBlPVwicmVjdFwiPkRJU2VsZWN0PC9hPiB0aGF0IGNhbiBiZSB1c2VkIHRvIG1hbmlwdWxhdGUgdGhlIGRlbGl2ZXJ5IGNvbnRleHQgYXNzb2NpYXRlZCB3aXRoIGEgcmVxdWVzdCBmb3IgYW4gaXRlbSBvZiBjb250ZW50LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkRlbGl2ZXJ5IENvbnRleHQ6IFhQYXRoIEFjY2VzcyBGdW5jdGlvbnMgMS4wIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NlbGVjdGlvbi14YWYiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NlbGVjdGlvbi14YWYiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NlbGVjdGlvbi14YWYvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NzZWxlY3Rpb24teGFmL3ZlcnNpb25zLzIwMDYxMDEwIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkxhc3QgQ2FsbCBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NlbGVjdGlvbi14YWYvdmVyc2lvbnMvMjAxMDA2MjkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jc2VsZWN0aW9uLXhhZiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nvb2x1cmlzLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+IDxzcGFuPlRoZSA8ZW0+UmVzb3VyY2UgRGVzY3JpcHRpb24gRnJhbWV3b3JrPC9lbT4gUkRGIGFsbG93cyB1c2VycyB0byBkZXNjcmliZSBib3RoIFdlYiBkb2N1bWVudHMgYW5kIGNvbmNlcHRzIGZyb20gdGhlIHJlYWwgd29ybGTigJRwZW9wbGUsIG9yZ2FuaXNhdGlvbnMsIHRvcGljcywgdGhpbmdz4oCUaW4gYSBjb21wdXRlci1wcm9jZXNzYWJsZSB3YXkuIFB1Ymxpc2hpbmcgc3VjaCBkZXNjcmlwdGlvbnMgb24gdGhlIFdlYiBjcmVhdGVzIHRoZSA8ZW0+U2VtYW50aWMgV2ViPC9lbT4uIFVSSXMgKFVuaWZvcm0gUmVzb3VyY2UgSWRlbnRpZmllcnMpIGFyZSB2ZXJ5IGltcG9ydGFudCwgcHJvdmlkaW5nIGJvdGggdGhlIGNvcmUgb2YgdGhlIGZyYW1ld29yayBpdHNlbGYgYW5kIHRoZSBsaW5rIGJldHdlZW4gUkRGIGFuZCB0aGUgV2ViLiBUaGlzIGRvY3VtZW50IHByZXNlbnRzIGd1aWRlbGluZXMgZm9yIHRoZWlyIGVmZmVjdGl2ZSB1c2UuIEl0IGRpc2N1c3NlcyB0d28gc3RyYXRlZ2llcywgY2FsbGVkIDxlbT4zMDMgVVJJczwvZW0+IGFuZCA8ZW0+aGFzaCBVUklzPC9lbT4uIEl0IGdpdmVzIHBvaW50ZXJzIHRvIHNldmVyYWwgV2ViIHNpdGVzIHRoYXQgdXNlIHRoZXNlIHNvbHV0aW9ucywgYW5kIGJyaWVmbHkgZGlzY3Vzc2VzIHdoeSBzZXZlcmFsIG90aGVyIHByb3Bvc2FscyBoYXZlIHByb2JsZW1zLiA8L3NwYW4+IDwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvb2wgVVJJcyBmb3IgdGhlIFNlbWFudGljIFdlYiIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNvb2x1cmlzIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb29sdXJpcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb29sdXJpcy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29vbHVyaXMvdmVyc2lvbnMvMjAwNzEyMTciLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nvb2x1cmlzL3ZlcnNpb25zLzIwMDgxMjAzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY29vbHVyaXMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9DU1MyLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+Q1NTIDIuMSBpcyBkZXJpdmVkIGZyb20gYW5kIGlzIGludGVuZGVkIHRvIHJlcGxhY2UgQ1NTMi4gSXQgc3VwcG9ydHMgbWVkaWEtc3BlY2lmaWMgc3R5bGUgc2hlZXRzIHNvIHRoYXQgYXV0aG9ycyBtYXkgdGFpbG9yIHRoZSBwcmVzZW50YXRpb24gb2YgdGhlaXIgZG9jdW1lbnRzIHRvIHZpc3VhbCBicm93c2VycywgYXVyYWwgZGV2aWNlcywgcHJpbnRlcnMsIGJyYWlsbGUgZGV2aWNlcywgaGFuZGhlbGQgZGV2aWNlcywgZXRjLiBJdCBhbHNvIHN1cHBvcnRzIGNvbnRlbnQgcG9zaXRpb25pbmcsIHRhYmxlIGxheW91dCwgZmVhdHVyZXMgZm9yIGludGVybmF0aW9uYWxpemF0aW9uIGFuZCBzb21lIHByb3BlcnRpZXMgcmVsYXRlZCB0byB1c2VyIGludGVyZmFjZS4gQ1NTIDIuMSBjb3JyZWN0cyBhIGZldyBlcnJvcnMgaW4gQ1NTMiAodGhlIG1vc3QgaW1wb3J0YW50IGJlaW5nIGEgbmV3IGRlZmluaXRpb24gb2YgdGhlIGhlaWdodC93aWR0aCBvZiBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQgZWxlbWVudHMsIG1vcmUgaW5mbHVlbmNlIGZvciBIVE1MJ3MgXCJzdHlsZVwiIGF0dHJpYnV0ZSBhbmQgYSBuZXcgY2FsY3VsYXRpb24gb2YgdGhlICdjbGlwJyBwcm9wZXJ0eSksIGFuZCBhZGRzIGEgZmV3IGhpZ2hseSByZXF1ZXN0ZWQgZmVhdHVyZXMgd2hpY2ggaGF2ZSBhbHJlYWR5IGJlZW4gd2lkZWx5IGltcGxlbWVudGVkLiBCdXQgbW9zdCBvZiBhbGwgQ1NTIDIuMSByZXByZXNlbnRzIGEgXCJzbmFwc2hvdFwiIG9mIENTUyB1c2FnZTogaXQgY29uc2lzdHMgb2YgYWxsIENTUyBmZWF0dXJlcyB0aGF0IGFyZSBpbXBsZW1lbnRlZCBpbnRlcm9wZXJhYmx5IGF0IHRoZSBkYXRlIG9mIHB1YmxpY2F0aW9uIG9mIHRoZSBSZWNvbW1lbmRhdGlvbi48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIExldmVsIDIgUmV2aXNpb24gMSAoQ1NTIDIuMSkgU3BlY2lmaWNhdGlvbiIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkNTUzIiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzMi8iLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjIuMSIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NTMiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1MyL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1MyL3ZlcnNpb25zLzE5OTcxMTA0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1MyL3ZlcnNpb25zLzIwMTEwNjA3IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInN1cGVyc2VkZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1MyL3N1cGVyc2VkZXMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY3NzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvd2FpLWFyaWEtcm9hZG1hcC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoZSBSb2FkbWFwIGZvciBBY2Nlc3NpYmxlIFJpY2ggSW50ZXJuZXQgQXBwbGljYXRpb25zIGFkZHJlc3NlcyB0aGUgYWNjZXNzaWJpbGl0eSBvZiBkeW5hbWljIFdlYiBjb250ZW50IGZvciBwZW9wbGUgd2l0aCBkaXNhYmlsaXRpZXMuIFRoZSByb2FkbWFwIGludHJvZHVjZXMgdGhlIHRlY2hub2xvZ2llcyB0byBtYXAgY29udHJvbHMsIEFqYXggbGl2ZSByZWdpb25zLCBhbmQgZXZlbnRzIHRvIGFjY2Vzc2liaWxpdHkgQVBJcywgaW5jbHVkaW5nIGN1c3RvbSBjb250cm9scyB1c2VkIGZvciBSaWNoIEludGVybmV0IEFwcGxpY2F0aW9ucy4gVGhlIHJvYWRtYXAgYWxzbyBkZXNjcmliZXMgbmV3IG5hdmlnYXRpb24gdGVjaG5pcXVlcyB0byBtYXJrIGNvbW1vbiBXZWIgc3RydWN0dXJlcyBhcyBtZW51cywgcHJpbWFyeSBjb250ZW50LCBzZWNvbmRhcnkgY29udGVudCwgYmFubmVyIGluZm9ybWF0aW9uIGFuZCBvdGhlciB0eXBlcyBvZiBXZWIgc3RydWN0dXJlcy4gVGhlc2UgbmV3IHRlY2hub2xvZ2llcyBjYW4gYmUgdXNlZCB0byBpbXByb3ZlIHRoZSBhY2Nlc3NpYmlsaXR5IGFuZCB1c2FiaWxpdHkgb2YgV2ViIHJlc291cmNlcyBieSBwZW9wbGUgd2l0aCBkaXNhYmlsaXRpZXMsIHdpdGhvdXQgZXh0ZW5zaXZlIG1vZGlmaWNhdGlvbiB0byBleGlzdGluZyBsaWJyYXJpZXMgb2YgV2ViIHJlc291cmNlcy4gVGhpcyBkb2N1bWVudCBpcyBwYXJ0IG9mIHRoZSBXQUktQVJJQSBzdWl0ZSBkZXNjcmliZWQgaW4gdGhlIFdBSS1BUklBIE92ZXJ2aWV3LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIlJvYWRtYXAgZm9yIEFjY2Vzc2libGUgUmljaCBJbnRlcm5ldCBBcHBsaWNhdGlvbnMgKFdBSS1BUklBIFJvYWRtYXApIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAid2FpLWFyaWEtcm9hZG1hcCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvd2FpLWFyaWEtcm9hZG1hcCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy93YWktYXJpYS1yb2FkbWFwL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy93YWktYXJpYS1yb2FkbWFwL3ZlcnNpb25zLzIwMDYwOTI2IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy93YWktYXJpYS1yb2FkbWFwL3ZlcnNpb25zLzIwMDgwMjA0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvd2FpLWFyaWEtcm9hZG1hcCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NoYXJyZXEvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD4gVGhpcyBkb2N1bWVudCB3YXMgd3JpdHRlbiBhcyB0aGUgZmlyc3Qgc3RlcCB0b3dhcmRzIGEgY2hhcmFjdGVyIG1vZGVsIGZvciBXM0Mgc3BlY2lmaWNhdGlvbnMsIHRvIG1ha2Ugc3VyZSB0aGF0IHRoZSByZXF1aXJlbWVudHMgb2Ygb3RoZXIgVzNDIFdvcmtpbmcgR3JvdXBzIChhbmQgb2Ygb3RoZXIgaW50ZXJlc3RlZCBwYXJ0aWVzKSBhcmUgdW5kZXJzdG9vZCBhbmQgY2FuIGJlIGFkZHJlc3NlZC4gPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVxdWlyZW1lbnRzIGZvciBTdHJpbmcgSWRlbnRpdHkgTWF0Y2hpbmcgYW5kIFN0cmluZyBJbmRleGluZyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNoYXJyZXEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NoYXJyZXEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcnJlcS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcnJlcS92ZXJzaW9ucy8xOTk4MDcxMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2hhcnJlcS92ZXJzaW9ucy8yMDA5MDkxNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NoYXJyZXEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9Db250ZW50LWluLVJERjEwLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBpcyBhIHNwZWNpZmljYXRpb24gZm9yIGEgdm9jYWJ1bGFyeSB0byByZXByZXNlbnQgQ29udGVudCBpbiA8YWNyb255bT5SREY8L2Fjcm9ueW0+LiBUaGlzIHZvY2FidWxhcnkgaXMgaW50ZW5kZWQgdG8gcHJvdmlkZSBhIGZsZXhpYmxlIGZyYW1ld29yayB3aXRoaW4gZGlmZmVyZW50IHVzYWdlIHNjZW5hcmlvcyB0byBzZW1hbnRpY2FsbHkgcmVwcmVzZW50IGFueSB0eXBlIG9mIGNvbnRlbnQsIGJlIGl0IG9uIHRoZSBXZWIgb3IgaW4gbG9jYWwgc3RvcmFnZSBtZWRpYS4gRm9yIGV4YW1wbGUsIGl0IGNhbiBiZSB1c2VkIGJ5IFdlYiBhY2Nlc3NpYmlsaXR5IGV2YWx1YXRpb24gdG9vbHMgdG8gcmVjb3JkIGEgcmVwcmVzZW50YXRpb24gb2YgdGhlIGFzc2Vzc2VkIFdlYiBjb250ZW50IGluIGFuIEV2YWx1YXRpb24gQW5kIFJlcG9ydCBMYW5ndWFnZSAoRUFSTCkgMS4wIFNjaGVtYSBldmFsdWF0aW9uIHJlcG9ydC4gVGhlIGRvY3VtZW50IGNvbnRhaW5zIGludHJvZHVjdG9yeSBpbmZvcm1hdGlvbiBvbiBpdHMgdXNhZ2UgYW5kIHNvbWUgZXhhbXBsZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVwcmVzZW50aW5nIENvbnRlbnQgaW4gUkRGIDEuMCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkNvbnRlbnQtaW4tUkRGMTAiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ29udGVudC1pbi1SREYxMCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9Db250ZW50LWluLVJERjEwL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9Db250ZW50LWluLVJERjEwL3ZlcnNpb25zLzIwMDgwOTA4IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9Db250ZW50LWluLVJERjEwL3ZlcnNpb25zLzIwMTcwMjAyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvQ29udGVudC1pbi1SREYiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi8yZGNvbnRleHQvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5EZWZpbmVzIHRoZSBmbGF0IGNhcnRlc2lhbiBzdXJmYWNlIHRoYXQgaXMgdGhlIGNvbnRleHQgZm9yIHRoZSBjYW52YXMgZWxlbWVudCAoZm9yIGRyYXdpbmcpLiA8L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJIVE1MIENhbnZhcyAyRCBDb250ZXh0IiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiMmRjb250ZXh0IiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy8yZGNvbnRleHQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvMmRjb250ZXh0L3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy8yZGNvbnRleHQvdmVyc2lvbnMvMjAxMDAzMDQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zLzJkY29udGV4dC92ZXJzaW9ucy8yMDIxMDEyOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzLzJkY29udGV4dCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FwaS1wZXJtcy8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgaWRlbnRpZmllcyB0aGUgcGVybWlzc2lvbnMgdGhhdCBhcmUgbmVlZGVkIHRvIHVzZSBzcGVjaWZpYyBjbGllbnQtc2lkZSBBUElzIHdoaWNoIGdyYW50IGFjY2VzcyB0byBzZW5zaXRpdmUgZGF0YSBhbmQgb3BlcmF0aW9ucy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJQZXJtaXNzaW9ucyBmb3IgRGV2aWNlIEFQSSBBY2Nlc3MiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhcGktcGVybXMiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2Rldi53My5vcmcvMjAwOS9kYXAvYXBpLXBlcm1zLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBpLXBlcm1zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FwaS1wZXJtcy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBpLXBlcm1zL3ZlcnNpb25zLzIwMTAxMDA1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcGktcGVybXMvdmVyc2lvbnMvMjAxNTA3MTQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9hcGktcGVybXMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jb250YWN0cy1hcGkvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyBhbiBBUEkgdGhhdCBwcm92aWRlcyBhY2Nlc3MgdG8gYSB1c2Vy4oCZcyB1bmlmaWVkIGFkZHJlc3MgYm9vay48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJQaWNrIENvbnRhY3RzIEludGVudCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNvbnRhY3RzLWFwaSIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29udGFjdHMtYXBpIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbnRhY3RzLWFwaS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29udGFjdHMtYXBpL3ZlcnNpb25zLzIwMTAwMTIxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb250YWN0cy1hcGkvdmVyc2lvbnMvMjAxNDAxMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jb250YWN0cy1hcGkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtMjAxMC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgY29sbGVjdHMgdG9nZXRoZXIgaW50byBvbmUgZGVmaW5pdGlvbiBhbGwgdGhlIHNwZWNzIHRoYXQgdG9nZXRoZXIgZm9ybSB0aGUgY3VycmVudCBzdGF0ZSBvZiBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIGFzIG9mIDIwMTAuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBTbmFwc2hvdCAyMDEwIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NzLTIwMTAiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjIwMTAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDEwIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDEwL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxMC92ZXJzaW9ucy8yMDEwMTIwMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMTAvdmVyc2lvbnMvMjAxMTA1MTIiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jc3MiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sLW1lZGlhLWNhcHR1cmUvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyBIVE1MIGZvcm0gZW5oYW5jZW1lbnRzIHRoYXQgcHJvdmlkZSBhY2Nlc3MgdG8gdGhlIGF1ZGlvLCBpbWFnZSBhbmQgdmlkZW8gY2FwdHVyZSBjYXBhYmlsaXRpZXMgb2YgdGhlIGRldmljZS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJIVE1MIE1lZGlhIENhcHR1cmUiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJodG1sLW1lZGlhLWNhcHR1cmUiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vaHRtbC1tZWRpYS1jYXB0dXJlLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvaHRtbC1tZWRpYS1jYXB0dXJlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2h0bWwtbWVkaWEtY2FwdHVyZS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvaHRtbC1tZWRpYS1jYXB0dXJlL3ZlcnNpb25zLzIwMTAwNDAxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9odG1sLW1lZGlhLWNhcHR1cmUvdmVyc2lvbnMvMjAxODAyMDEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVjb21tZW5kYXRpb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvaHRtbC1tZWRpYS1jYXB0dXJlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQ1NQMS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGlzIGEgbWVjaGFuaXNtIHdlYiBhcHBsaWNhdGlvbnMgY2FuIHVzZSB0byBtaXRpZ2F0ZSB0aGUgYnJvYWQgY2xhc3Mgb2YgY29udGVudCBpbmplY3Rpb24gdnVsbmVyYWJpbGl0aWVzLCBzdWNoIGFzIGNyb3NzLXNpdGUgc2NyaXB0aW5nIChYU1MpLiBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBpcyBhIGRlY2xhcmF0aXZlIHBvbGljeSB0aGF0IGxldHMgdGhlIGF1dGhvcnMgKG9yIHNlcnZlciBhZG1pbmlzdHJhdG9ycykgb2YgYSB3ZWIgYXBwbGljYXRpb24gcmVzdHJpY3QgZnJvbSB3aGVyZSB0aGUgYXBwbGljYXRpb24gY2FuIGxvYWQgcmVzb3VyY2VzLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5IDEuMCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkNTUDEiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2R2Y3MudzMub3JnL2hnL2NvbnRlbnQtc2VjdXJpdHktcG9saWN5L3Jhdy1maWxlL3RpcC9jc3AtMS4wLXNwZWNpZmljYXRpb24uaHRtbCIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMS4wIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1AxIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NTUDEvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NTUDEvdmVyc2lvbnMvMjAxMTExMjkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NTUDEvdmVyc2lvbnMvMjAxNTAyMTkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9DU1AiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hbmltYXRpb24tdGltaW5nLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+IFRoaXMgZG9jdW1lbnQgZGVmaW5lcyBhbiBBUEkgd2ViIHBhZ2UgYXV0aG9ycyBjYW4gdXNlIHRvIHdyaXRlIHNjcmlwdC1iYXNlZCBhbmltYXRpb25zIHdoZXJlIHRoZSB1c2VyIGFnZW50IGlzIGluIGNvbnRyb2wgb2YgbGltaXRpbmcgdGhlIHVwZGF0ZSByYXRlIG9mIHRoZSBhbmltYXRpb24uIDwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIlRpbWluZyBjb250cm9sIGZvciBzY3JpcHQtYmFzZWQgYW5pbWF0aW9ucyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFuaW1hdGlvbi10aW1pbmciLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vYW5pbWF0aW9uLXRpbWluZy8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FuaW1hdGlvbi10aW1pbmciCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYW5pbWF0aW9uLXRpbWluZy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYW5pbWF0aW9uLXRpbWluZy92ZXJzaW9ucy8yMDExMDYwMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYW5pbWF0aW9uLXRpbWluZy92ZXJzaW9ucy8yMDE1MDkyMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FuaW1hdGlvbi10aW1pbmciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hcHAtcHJpdmFjeS1icC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPiBUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyBwcml2YWN5IGJlc3QgcHJhY3RpY2VzIGZvciB3ZWIgYXBwbGljYXRpb25zLCBpbmNsdWRpbmcgdGhvc2UgdGhhdCBtaWdodCB1c2UgZGV2aWNlIEFQSXMuIDwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIldlYiBBcHBsaWNhdGlvbiBQcml2YWN5IEJlc3QgUHJhY3RpY2VzIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYXBwLXByaXZhY3ktYnAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FwcC1wcml2YWN5LWJwIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FwcC1wcml2YWN5LWJwL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcHAtcHJpdmFjeS1icC92ZXJzaW9ucy8yMDExMDgwNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBwLXByaXZhY3ktYnAvdmVyc2lvbnMvMjAxMjA3MDMiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9hcHAtcHJpdmFjeS1icCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2F1ZGlvcHJvYy8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgc3BlY2lmaWNhdGlvbiBpbnRyb2R1Y2VzIGFuZCBjb21wYXJlcyB0d28gY2xpZW50LXNpZGUgQVBJcyBmb3IgcHJvY2Vzc2luZyBhbmQgc3ludGhlc2l6aW5nIHJlYWwtdGltZSBhdWRpbyBzdHJlYW1zIGluIHRoZSBicm93c2VyLiA8L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBdWRpbyBQcm9jZXNzaW5nIEFQSSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImF1ZGlvcHJvYyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXVkaW9wcm9jIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2F1ZGlvcHJvYy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXVkaW9wcm9jL3ZlcnNpb25zLzIwMTExMjE1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hdWRpb3Byb2MvdmVyc2lvbnMvMjAyNTA1MjciLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9hdWRpb3Byb2MiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9iYXR0ZXJ5LXN0YXR1cy8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPiBUaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyBhIG5ldyBET00gZXZlbnQgdHlwZSB0aGF0IHByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBiYXR0ZXJ5IHN0YXR1cyBvZiB0aGUgaG9zdGluZyBkZXZpY2UgYW5kIGFzc29jaWF0ZWQgYXV4aWxpYXJ5IGRldmljZXMuIDwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkJhdHRlcnkgU3RhdHVzIEFQSSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImJhdHRlcnktc3RhdHVzIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2JhdHRlcnkvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iYXR0ZXJ5LXN0YXR1cyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iYXR0ZXJ5LXN0YXR1cy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYmF0dGVyeS1zdGF0dXMvdmVyc2lvbnMvMjAxMTA0MjYiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2JhdHRlcnktc3RhdHVzL3ZlcnNpb25zLzIwMjQxMDI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYmF0dGVyeS1zdGF0dXMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jYWxlbmRhci1hcGkvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD4gVGhlIENhbGVuZGFyIEFQSSBkZWZpbmVzIHRoZSBoaWdoLWxldmVsIGludGVyZmFjZXMgcmVxdWlyZWQgdG8gb2J0YWluIHJlYWQgYWNjZXNzIHRvIGEgdXNlcidzIGNhbGVuZGFyaW5nIHNlcnZpY2UuIDwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNhbGVuZGFyIEFQSSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNhbGVuZGFyLWFwaSIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2FsZW5kYXItYXBpIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhbGVuZGFyLWFwaS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2FsZW5kYXItYXBpL3ZlcnNpb25zLzIwMTEwNDE5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jYWxlbmRhci1hcGkvdmVyc2lvbnMvMjAxNDAxMTQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jYWxlbmRhci1hcGkiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hcGktZGVzaWduLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBjYXB0dXJlcyBjb21tb24gcHJhY3RpY2VzIGluIGRlc2lnbmluZyBBUElzIHRoYXQgZml0IHdlbGwgaW50byB0aGUgV2ViIHBsYXRmb3JtIGFzIGEgd2hvbGUsIHVzaW5nIFdlYklETC48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXZWIgQVBJIERlc2lnbiBDb29rYm9vayIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFwaS1kZXNpZ24iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FwaS1kZXNpZ24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBpLWRlc2lnbi92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBpLWRlc2lnbi92ZXJzaW9ucy8yMDEyMTAwMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBpLWRlc2lnbi92ZXJzaW9ucy8yMDEyMTAwMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FwaS1kZXNpZ24iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi8yZGNvbnRleHQyLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgdGhlIDJEIENvbnRleHQsIExldmVsIDIgZm9yIHRoZSBIVE1MIGNhbnZhcyBlbGVtZW50LiBUaGUgMkQgQ29udGV4dCBwcm92aWRlcyBvYmplY3RzLCBtZXRob2RzLCBhbmQgcHJvcGVydGllcyB0byBkcmF3IGFuZCBtYW5pcHVsYXRlIGdyYXBoaWNzIG9uIGEgY2FudmFzIGRyYXdpbmcgc3VyZmFjZS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJIVE1MIENhbnZhcyAyRCBDb250ZXh0LCBMZXZlbCAyIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiMmRjb250ZXh0MiIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMiIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvMmRjb250ZXh0MiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy8yZGNvbnRleHQyL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy8yZGNvbnRleHQyL3ZlcnNpb25zLzIwMTIxMjE3IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy8yZGNvbnRleHQyL3ZlcnNpb25zLzIwMTUwOTI5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvMmRjb250ZXh0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQ1NQMi8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVmaW5lcyBhIHBvbGljeSBsYW5ndWFnZSB1c2VkIHRvIGRlY2xhcmUgYSBzZXQgb2YgY29udGVudCByZXN0cmljdGlvbnMgZm9yIGEgd2ViIHJlc291cmNlLCBhbmQgYSBtZWNoYW5pc20gZm9yIHRyYW5zbWl0dGluZyB0aGUgcG9saWN5IGZyb20gYSBzZXJ2ZXIgdG8gYSBjbGllbnQgd2hlcmUgdGhlIHBvbGljeSBpcyBlbmZvcmNlZC48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlY3VyaXR5IFBvbGljeSBMZXZlbCAyIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiQ1NQMiIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtY3NwLyIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMiIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NQMiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1AyL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1AyL3ZlcnNpb25zLzIwMTIxMjEzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1AyL3ZlcnNpb25zLzIwMTYxMjE1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL0NTUCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FjY2Vzc2liaWxpdHktbWV0cmljcy1yZXBvcnQvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5BY2Nlc3NpYmlsaXR5IG1ldHJpY3MgY2FuIGV4dGVuZCB0aGUgZXhpc3RpbmcgV0NBRyAyLjAgY29uZm9ybWFuY2UgbW9kZWwgdG8gcHJvdmlkZSBzY29yZXMgZm9yIHRoZSBhY2Nlc3NpYmlsaXR5IGxldmVsIG9mIHdlYnNpdGVzIGluIG1vcmUgZGVwdGggYW5kIGRldGFpbC4gVGhpcyBSZXBvcnQgcHJvdmlkZXMgY29uc2lkZXJhdGlvbnMgZm9yIHZhbGlkaXR5LCByZWxpYWJpbGl0eSwgc2Vuc2l0aXZpdHksIGFkZXF1YWN5LCBhbmQgY29tcGxleGl0eSBhcyB0aGUgbWFpbiBxdWFsaXRpZXMgb2YgbWVhc3VyaW5nIHdlYiBhY2Nlc3NpYmlsaXR5LiBUaGUgUmVwb3J0IGlzIGEgY29uc29saWRhdGVkIHZpZXcgb2YgdGhlIG91dGNvbWVzIG9mIHRoZSA8YSBocmVmPVwiaHR0cDovL3d3dy53My5vcmcvV0FJL1JELzIwMTEvbWV0cmljcy9cIj5XZWJzaXRlIEFjY2Vzc2liaWxpdHkgTWV0cmljcyBPbmxpbmUgU3ltcG9zaXVtPC9hPi48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXNlYXJjaCBSZXBvcnQgb24gV2ViIEFjY2Vzc2liaWxpdHkgTWV0cmljcyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFjY2Vzc2liaWxpdHktbWV0cmljcy1yZXBvcnQiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY2Vzc2liaWxpdHktbWV0cmljcy1yZXBvcnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjZXNzaWJpbGl0eS1tZXRyaWNzLXJlcG9ydC92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjZXNzaWJpbGl0eS1tZXRyaWNzLXJlcG9ydC92ZXJzaW9ucy8yMDEyMDgzMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjZXNzaWJpbGl0eS1tZXRyaWNzLXJlcG9ydC92ZXJzaW9ucy8yMDEyMDgzMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FjY2Vzc2liaWxpdHktbWV0cmljcy1yZXBvcnQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hbWJpZW50LWxpZ2h0LyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgYSBtZWFucyB0byByZWNlaXZlIGV2ZW50cyB0aGF0IGNvcnJlc3BvbmQgdG8gYSBsaWdodCBzZW5zb3IgZGV0ZWN0aW5nIHRoZSBwcmVzZW5jZSBvZiBhIGxpZ2h0LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkFtYmllbnQgTGlnaHQgU2Vuc29yIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYW1iaWVudC1saWdodCIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hbWJpZW50LWxpZ2h0LyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYW1iaWVudC1saWdodCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbWJpZW50LWxpZ2h0L3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbWJpZW50LWxpZ2h0L3ZlcnNpb25zLzIwMTIwODAyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbWJpZW50LWxpZ2h0L3ZlcnNpb25zLzIwMjUwMjEyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYW1iaWVudC1saWdodCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NhcHR1cmUtc2NlbmFyaW9zLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBjb2xsYXRlcyB0aGUgc2NlbmFyaW9zIHRoYXQgYXJlIHRhcmdldCB1c2UgY2FzZXMgZm9yIHRoZSBNZWRpYSBDYXB0dXJlIEFQSSB0aGF0IGVuYWJsZXMgYWNjZXNzIHRvIG1lZGlhIGlucHV0IGNhcGFiaWxpdGllcyBmb3IgV2ViIGFwcGxpY2F0aW9ucyB1c2luZyBKYXZhc2NyaXB0LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIk1lZGlhU3RyZWFtIENhcHR1cmUgU2NlbmFyaW9zIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY2FwdHVyZS1zY2VuYXJpb3MiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhcHR1cmUtc2NlbmFyaW9zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhcHR1cmUtc2NlbmFyaW9zL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jYXB0dXJlLXNjZW5hcmlvcy92ZXJzaW9ucy8yMDEyMDMwNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2FwdHVyZS1zY2VuYXJpb3MvdmVyc2lvbnMvMjAxMjAzMDYiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jYXB0dXJlLXNjZW5hcmlvcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NvbXBvbmVudHMtaW50cm8vIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5Qcm92aWRlcyBhbiBvdmVydmlldyBvZiBXZWIgQ29tcG9uZW50cy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJJbnRyb2R1Y3Rpb24gdG8gV2ViIENvbXBvbmVudHMiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjb21wb25lbnRzLWludHJvIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmNvbXBvbmVudHMvZXhwbGFpbmVyLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29tcG9uZW50cy1pbnRybyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb21wb25lbnRzLWludHJvL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb21wb25lbnRzLWludHJvL3ZlcnNpb25zLzIwMTIwNTIyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb21wb25lbnRzLWludHJvL3ZlcnNpb25zLzIwMTQwNzI0IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY29tcG9uZW50cy1pbnRybyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NvbXBvc2l0aW5nLTEvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5Db21wb3NpdGluZyBkZXNjcmliZXMgaG93IHNoYXBlcyBvZiBkaWZmZXJlbnQgZWxlbWVudHMgYXJlIGNvbWJpbmVkIGludG8gYSBzaW5nbGUgaW1hZ2UgYnkgb3ZlcmxheWluZywgbWFza2luZywgYmxlbmRpbmcsIGV0Yy4gVGhlIHNwZWNpZmljYXRpb24gYWxzbyBkZWZpbmVzIGEgc3ludGF4IGZvciB1c2luZyBjb21wb3NpdGluZyBpbiBDU1MuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29tcG9zaXRpbmcgYW5kIEJsZW5kaW5nIExldmVsIDEiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjb21wb3NpdGluZy0xIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly9kcmFmdHMuZnh0Zi5vcmcvY29tcG9zaXRpbmctMS8iLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbXBvc2l0aW5nLTEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29tcG9zaXRpbmctMS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29tcG9zaXRpbmctMS92ZXJzaW9ucy8yMDEyMDgxNiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29tcG9zaXRpbmctMS92ZXJzaW9ucy8yMDI0MDMyMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDYW5kaWRhdGUgUmVjb21tZW5kYXRpb24gRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic3VwZXJzZWRlcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbXBvc2l0aW5nLTEvc3VwZXJzZWRlcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jb21wb3NpdGluZyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FwcC11cmkvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyB0aGUgYXBwOiBVUkkgc2NoZW1lIGFuZCBydWxlcyBmb3IgZGVyZWZlcmVuY2luZyBhbiBhcHA6IFVSSSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYWRkcmVzcyByZXNvdXJjZXMgaW5zaWRlIGEgcGFja2FnZSAoZS5nLiwgYSBwYWNrYWdlZCBhcHBsaWNhdGlvbikuIFRoZSBkZXJlZmVyZW5jaW5nIG1vZGVsIHJlbGllcyBvbiBIVFRQIHNlbWFudGljcyB0byByZXR1cm4gcmVzb3VyY2VzIGluIGEgbWFubmVyIGFraW4gdG8gYSBIVFRQIEdFVCByZXF1ZXN0LiBEb2luZyBzbyBhbGxvd3MgdGhpcyBVUkkgc2NoZW1lIHRvIGJlIHVzZWQgd2l0aCBvdGhlciB0ZWNobm9sb2dpZXMgdGhhdCByZWx5IG9uIEhUVFAgcmVzcG9uc2VzIHRvIGZ1bmN0aW9uIGFzIGludGVuZGVkLCBzdWNoIGFzIFtYSFJdLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIlRoZSBhcHA6IFVSTCBTY2hlbWUiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhcHAtdXJpIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly9hcHAtdXJpLnN5c2FwcHMub3JnLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBwLXVyaSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcHAtdXJpL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcHAtdXJpL3ZlcnNpb25zLzIwMTMwNTE2IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcHAtdXJpL3ZlcnNpb25zLzIwMTUwNzIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYXBwLXVyaSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL3VzaW5nLWFyaWEvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IGlzIGEgcHJhY3RpY2FsIGd1aWRlIGZvciBkZXZlbG9wZXJzIG9uIGhvdyB0byBhZGQgYWNjZXNzaWJpbGl0eSBpbmZvcm1hdGlvbiB0byBIVE1MIGVsZW1lbnRzIHVzaW5nIEFSSUEsIGEgbWFya3VwIG1lY2hhbmlzbSBmb3IgbWFraW5nIFdlYiBjb250ZW50IGFuZCBXZWIgYXBwbGljYXRpb25zIG1vcmUgYWNjZXNzaWJsZSB0byBwZW9wbGUgd2l0aCBkaXNhYmlsaXRpZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiVXNpbmcgQVJJQSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogInVzaW5nLWFyaWEiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vdXNpbmctYXJpYS8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL3VzaW5nLWFyaWEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvdXNpbmctYXJpYS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvdXNpbmctYXJpYS92ZXJzaW9ucy8yMDEzMDIxNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvdXNpbmctYXJpYS92ZXJzaW9ucy8yMDE4MDkyNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL3VzaW5nLWFyaWEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jb250YWN0cy1tYW5hZ2VyLWFwaS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPkEgc3lzdGVtIGxldmVsIEFQSSBmb3IgbWFuYWdpbmcgdGhlIHVzZXIncyBjb250YWN0cyB0aGF0IGFyZSBzdG9yZWQgaW4gdGhlIHN5c3RlbSdzIGFkZHJlc3MgYm9vay48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250YWN0cyBNYW5hZ2VyIEFQSSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNvbnRhY3RzLW1hbmFnZXItYXBpIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93d3cudzMub3JnLzIwMTIvc3lzYXBwcy9jb250YWN0cy1tYW5hZ2VyLWFwaS8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbnRhY3RzLW1hbmFnZXItYXBpIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvbnRhY3RzLW1hbmFnZXItYXBpL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb250YWN0cy1tYW5hZ2VyLWFwaS92ZXJzaW9ucy8yMDEzMDMwNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY29udGFjdHMtbWFuYWdlci1hcGkvdmVyc2lvbnMvMjAxNTA2MDIiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jb250YWN0cy1tYW5hZ2VyLWFwaSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2JlYWNvbi8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgc3BlY2lmaWNhdGlvbiBkZWZpbmVzIGFuIGludGVyb3BlcmFibGUgbWVhbnMgZm9yIHNpdGUgZGV2ZWxvcGVycyB0byBhc3luY2hyb25vdXNseSB0cmFuc2ZlciBkYXRhIGZyb20gdGhlIHVzZXIgYWdlbnQgdG8gYSB3ZWIgc2VydmVyLCB3aXRoIHRoZSB1c2VyIGFnZW50IHRha2luZyB0aGUgcmVzcG9uc2liaWxpdHkgdG8gZXZlbnR1YWxseSBzZW5kIHRoZSBkYXRhLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkJlYWNvbiIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImJlYWNvbiIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby9iZWFjb24vIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iZWFjb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYmVhY29uL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iZWFjb24vdmVyc2lvbnMvMjAxMzEwMjkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9iZWFjb24vdmVyc2lvbnMvMjAyMjA4MDMiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2FuZGlkYXRlIFJlY29tbWVuZGF0aW9uIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2JlYWNvbiIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2Fic3RyYWN0LXVpLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+RGVmaW5lcyBhIG1ldGEtbW9kZWwgYW5kIFhNTCBzZXJpYWxpemF0aW9uIGZvciBpbnRlcmNoYW5nZSBvZiB1c2VyIGludGVyZmFjZSBkZXNpZ25zLCB0aGF0IGFyZSBleHByZXNzZWQgYXQgYW4gYWJzdHJhY3QgbGV2ZWwsIGluZGVwZW5kZW50IG9mIHRoZSB0YXJnZXQgcGxhdGZvcm0gb3IgbW9kZXMgb2YgaW50ZXJhY3Rpb24uPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiTUJVSSAtIEFic3RyYWN0IFVzZXIgSW50ZXJmYWNlIE1vZGVscyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFic3RyYWN0LXVpIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hYnN0cmFjdC11aSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hYnN0cmFjdC11aS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWJzdHJhY3QtdWkvdmVyc2lvbnMvMjAxMzExMDUiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hYnN0cmFjdC11aS92ZXJzaW9ucy8yMDE0MDQwOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2Fic3RyYWN0LXVpIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvYXBwbWFuaWZlc3QvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHNwZWNpZmljYXRpb24gZGVmaW5lcyBhIG1hbmlmZXN0LCB3aGljaCBwcm92aWRlcyBkZXZlbG9wZXJzIHdpdGggYSBjZW50cmFsaXplZCBwbGFjZSB0byBwdXQgbWV0YWRhdGEgYWJvdXQgYSB3ZWIgYXBwbGljYXRpb24uPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiV2ViIEFwcGxpY2F0aW9uIE1hbmlmZXN0IiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYXBwbWFuaWZlc3QiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vbWFuaWZlc3QvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcHBtYW5pZmVzdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcHBtYW5pZmVzdC92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXBwbWFuaWZlc3QvdmVyc2lvbnMvMjAxMzEyMTciLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hcHBtYW5pZmVzdC92ZXJzaW9ucy8yMDI1MDUwNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FwcG1hbmlmZXN0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY2FwYWJpbGl0eS11cmxzLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+Q2FwYWJpbGl0eSBVUkxzIGdyYW50IGFjY2VzcyB0byBhIHJlc291cmNlIHRvIGFueW9uZSB3aG8gaGFzIHRoZSBVUkwuIFRoZXJlIGFyZSB0aW1lcyB3aGVuIHRoaXMgaXMgdXNlZnVsLCBmb3IgZXhhbXBsZSBvbmUtc2hvdCBwYXNzd29yZCByZXNldCBVUkxzLCBidXQgb3ZlcnVzZSBjYW4gYmUgcHJvYmxlbWF0aWMgYXMgVVJMcyBjYW5ub3QgZ2VuZXJhbGx5IGJlIGtlcHQgc2VjcmV0LiBUaGlzIGRvY3VtZW50IHByb3ZpZGVzIHNvbWUgZ29vZCBwcmFjdGljZXMgZm9yIHdlYiBkZXZlbG9wZXJzIHdobyB3aXNoIHRvIGluY29ycG9yYXRlIGNhcGFiaWxpdHkgVVJMcyBpbnRvIHRoZWlyIGFwcGxpY2F0aW9ucy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJHb29kIFByYWN0aWNlcyBmb3IgQ2FwYWJpbGl0eSBVUkxzIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY2FwYWJpbGl0eS11cmxzIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2N0YWcuZ2l0aHViLmlvL2NhcGFiaWxpdHktdXJscy8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhcGFiaWxpdHktdXJscyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jYXBhYmlsaXR5LXVybHMvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhcGFiaWxpdHktdXJscy92ZXJzaW9ucy8yMDE0MDIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NhcGFiaWxpdHktdXJscy92ZXJzaW9ucy8yMDE0MDIxOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jYXBhYmlsaXR5LXVybHMiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jb3JlLWFhbS0xLjEvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5EZXNjcmliZXMgaG93IHVzZXIgYWdlbnRzIHNob3VsZCBleHBvc2Ugc2VtYW50aWNzIG9mIHdlYiBjb250ZW50IGxhbmd1YWdlcyB0byB2YXJpb3VzIGFjY2Vzc2liaWxpdHkgQVBJcyBpbiBhbiBpbnRlcm9wZXJhYmxlIG1hbm5lci4gVGhpcyBoZWxwcyB1c2VycyB3aXRoIGRpc2FiaWxpdGllcyB0byBvYnRhaW4gYW5kIGludGVyYWN0IHdpdGggaW5mb3JtYXRpb24gdXNpbmcgYXNzaXN0aXZlIHRlY2hub2xvZ2llcy4gVGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgY29yZSBmdW5jdGlvbmFsaXR5OyBvdGhlciBzcGVjaWZpY2F0aW9ucyBkZXBlbmQgb24gYW5kIGV4dGVuZCB0aGlzIGZvciBzcGVjaWZpYyB0ZWNobm9sb2dpZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29yZSBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyAxLjEiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjb3JlLWFhbS0xLjEiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vY29yZS1hYW0vIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIxLjEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb3JlLWFhbS0xLjEvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMS92ZXJzaW9ucy8yMDE0MDYxMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMS92ZXJzaW9ucy8yMDE3MTIxNCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZWNvbW1lbmRhdGlvbiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jb3JlLWFhbSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FjdGl2aXR5c3RyZWFtcy1jb3JlLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBzcGVjaWZpY2F0aW9uIGRldGFpbHMgYSBtb2RlbCBmb3IgcmVwcmVzZW50aW5nXHJcbnBvdGVudGlhbCBhbmQgY29tcGxldGVkIGFjdGl2aXRpZXMgdXNpbmcgdGhlIEpTT04gZm9ybWF0LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkFjdGl2aXR5IFN0cmVhbXMgMi4wIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYWN0aXZpdHlzdHJlYW1zLWNvcmUiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vYWN0aXZpdHlzdHJlYW1zL2NvcmUvIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIyLjAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdGl2aXR5c3RyZWFtcy1jb3JlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdGl2aXR5c3RyZWFtcy1jb3JlL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY3Rpdml0eXN0cmVhbXMtY29yZS92ZXJzaW9ucy8yMDE0MTAyMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdGl2aXR5c3RyZWFtcy1jb3JlL3ZlcnNpb25zLzIwMTcwNTIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FjdGl2aXR5c3RyZWFtcy1jb3JlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvYWN0aXZpdHlzdHJlYW1zLXZvY2FidWxhcnkvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHNwZWNpZmljYXRpb24gZGVzY3JpYmVzIHRoZSBBY3Rpdml0eSB2b2NhYnVsYXJ5LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkFjdGl2aXR5IFZvY2FidWxhcnkiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhY3Rpdml0eXN0cmVhbXMtdm9jYWJ1bGFyeSIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hY3Rpdml0eXN0cmVhbXMvdm9jYWJ1bGFyeS8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdGl2aXR5c3RyZWFtcy12b2NhYnVsYXJ5IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdGl2aXR5c3RyZWFtcy12b2NhYnVsYXJ5L3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY3Rpdml0eXN0cmVhbXMtdm9jYWJ1bGFyeS92ZXJzaW9ucy8yMDE0MTAyMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdGl2aXR5c3RyZWFtcy12b2NhYnVsYXJ5L3ZlcnNpb25zLzIwMTcwNTIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FjdGl2aXR5c3RyZWFtcy12b2NhYnVsYXJ5IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvYWNjbmFtZS0xLjEvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5EZXNjcmliZXMgaG93IHVzZXIgYWdlbnRzIGRldGVybWluZSBuYW1lcyBhbmQgZGVzY3JpcHRpb25zIG9mIGFjY2Vzc2libGUgb2JqZWN0cyBmcm9tIHdlYiBjb250ZW50IGxhbmd1YWdlcyBhbmQgZXhwb3NlIHRoZW0gaW4gYWNjZXNzaWJpbGl0eSBBUElzLiA8L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBY2Nlc3NpYmxlIE5hbWUgYW5kIERlc2NyaXB0aW9uIENvbXB1dGF0aW9uIDEuMSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFjY25hbWUtMS4xIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FjY25hbWUvIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIxLjEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY25hbWUtMS4xIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY25hbWUtMS4xL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY2NuYW1lLTEuMS92ZXJzaW9ucy8yMDE0MTIxMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY25hbWUtMS4xL3ZlcnNpb25zLzIwMTgxMjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FjY25hbWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hbm5vdGF0aW9uLW1vZGVsLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhlIFdlYiBBbm5vdGF0aW9uIERhdGEgTW9kZWwgc3BlY2ZpY2F0aW9uIGRlc2NyaWJlcyBhIHN0cnVjdHVyZWQgbW9kZWwgYW5kIGZvcm1hdCB0byBlbmFibGUgYW5ub3RhdGlvbnMgdG8gYmUgc2hhcmVkIGFuZCByZXVzZWQgYWNyb3NzIGRpZmZlcmVudCBoYXJkd2FyZSBhbmQgc29mdHdhcmUgcGxhdGZvcm1zIHRvIHN1cHBvcnQgYSB3aWRlIHZhcmlldHkgb2Ygc2ltcGxlIGFzIHdlbGwgYXMgY29tcGxleCBhcHBsaWNhdGlvbiB1c2UgY2FzZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiV2ViIEFubm90YXRpb24gRGF0YSBNb2RlbCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFubm90YXRpb24tbW9kZWwiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vd2ViLWFubm90YXRpb24vIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLW1vZGVsIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24tbW9kZWwvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24tbW9kZWwvdmVyc2lvbnMvMjAxNDEyMTEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLW1vZGVsL3ZlcnNpb25zLzIwMTcwMjIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2Fubm90YXRpb24tbW9kZWwiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jb2dhLXVzZXItcmVzZWFyY2gvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5EZXNjcmliZXMgdGhlIGNoYWxsZW5nZXMgb2YgdXNpbmcgd2ViIHRlY2hub2xvZ2llcyBmb3IgdXNlcnMgd2l0aCBsZWFybmluZyBkaXNhYmlsaXRpZXMgb3IgY29nbml0aXZlIGRpc2FiaWxpdGllcy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb2duaXRpdmUgQWNjZXNzaWJpbGl0eSBVc2VyIFJlc2VhcmNoIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY29nYS11c2VyLXJlc2VhcmNoIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2NvZ2EvdXNlci1yZXNlYXJjaC8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvZ2EtdXNlci1yZXNlYXJjaCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb2dhLXVzZXItcmVzZWFyY2gvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvZ2EtdXNlci1yZXNlYXJjaC92ZXJzaW9ucy8yMDE1MDExNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvZ2EtdXNlci1yZXNlYXJjaC92ZXJzaW9ucy8yMDE1MDExNSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jb2dhLXVzZXItcmVzZWFyY2giCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hdWRpby1vdXRwdXQvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IGRlZmluZXMgYSBzZXQgb2YgSmF2YVNjcmlwdCBBUElzIHRoYXQgbGV0IGEgV2ViIGFwcGxpY2F0aW9uIG1hbmFnZSBob3cgYXVkaW8gaXMgcmVuZGVyZWQgb24gdGhlIHVzZXIgYXVkaW8gb3V0cHV0IGRldmljZXMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQXVkaW8gT3V0cHV0IERldmljZXMgQVBJIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYXVkaW8tb3V0cHV0IiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL21lZGlhY2FwdHVyZS1vdXRwdXQvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hdWRpby1vdXRwdXQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYXVkaW8tb3V0cHV0L3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hdWRpby1vdXRwdXQvdmVyc2lvbnMvMjAxNTAyMTAiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hdWRpby1vdXRwdXQvdmVyc2lvbnMvMjAyNTA0MTciLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2FuZGlkYXRlIFJlY29tbWVuZGF0aW9uIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2F1ZGlvLW91dHB1dCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NzcC1waW5uaW5nLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBkZWZpbmVzIGEgbmV3IEhUVFAgaGVhZGVyIHRoYXQgYWxsb3dzIGF1dGhvcnMgdG8gaW5zdHJ1Y3QgdXNlciBhZ2VudHMgdG8gcmVtZW1iZXIgKFwicGluXCIpIGFuZCBlbmZvcmNlIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yIGEgc2V0IG9mIGhvc3RzIGZvciBhIHBlcmlvZCBvZiB0aW1lLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5IFBpbm5pbmciLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjc3AtcGlubmluZyIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtY3NwL3Bpbm5pbmcvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3AtcGlubmluZyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3AtcGlubmluZy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NwLXBpbm5pbmcvdmVyc2lvbnMvMjAxNTAyMjYiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3AtcGlubmluZy92ZXJzaW9ucy8yMDE2MDkxMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NzcC1waW5uaW5nIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY3JlZGVudGlhbC1tYW5hZ2VtZW50LTEvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIHNwZWNpZmljYXRpb24gZGVzY3JpYmVzIGFuIGltcGVyYXRpdmUgQVBJIGVuYWJsaW5nIGEgd2Vic2l0ZSB0b1xyXG5yZXF1ZXN0IGEgdXNlcuKAmXMgY3JlZGVudGlhbHMgZnJvbSBhIHVzZXIgYWdlbnQsIGFuZCB0byBoZWxwIHRoZSB1c2VyIGFnZW50XHJcbmNvcnJlY3RseSBzdG9yZSB1c2VyIGNyZWRlbnRpYWxzIGZvciBmdXR1cmUgdXNlLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNyZWRlbnRpYWwgTWFuYWdlbWVudCBMZXZlbCAxIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3JlZGVudGlhbC1tYW5hZ2VtZW50LTEiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLWNyZWRlbnRpYWwtbWFuYWdlbWVudC8iLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NyZWRlbnRpYWwtbWFuYWdlbWVudC0xIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NyZWRlbnRpYWwtbWFuYWdlbWVudC0xL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jcmVkZW50aWFsLW1hbmFnZW1lbnQtMS92ZXJzaW9ucy8yMDE1MDQzMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NyZWRlbnRpYWwtbWFuYWdlbWVudC0xL3ZlcnNpb25zLzIwMjQwODEzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY3JlZGVudGlhbC1tYW5hZ2VtZW50IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvYW5ub3RhdGlvbi1wcm90b2NvbC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPkFubm90YXRpb25zIGFyZSB0eXBpY2FsbHkgdXNlZCB0byBjb252ZXkgaW5mb3JtYXRpb24gYWJvdXQgYSByZXNvdXJjZSBvciBhc3NvY2lhdGlvbnMgYmV0d2VlbiByZXNvdXJjZXMuIFNpbXBsZSBleGFtcGxlcyBpbmNsdWRlIGEgY29tbWVudCBvciB0YWcgb24gYSBzaW5nbGUgd2ViIHBhZ2Ugb3IgaW1hZ2UsIG9yIGEgYmxvZyBwb3N0IGFib3V0IGEgbmV3cyBhcnRpY2xlLjwvcD5cclxuPHA+VGhlIFdlYiBBbm5vdGF0aW9uIFByb3RvY29sIGRlc2NyaWJlcyB0aGUgdHJhbnNwb3J0IG1lY2hhbmlzbXMgZm9yIGNyZWF0aW5nIGFuZCBtYW5hZ2luZyBhbm5vdGF0aW9ucyBpbiBhIG1ldGhvZCB0aGF0IGlzIGNvbnNpc3RlbnQgd2l0aCB0aGUgV2ViIEFyY2hpdGVjdHVyZSBhbmQgUkVTVCBiZXN0IHByYWN0aWNlcy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXZWIgQW5ub3RhdGlvbiBQcm90b2NvbCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFubm90YXRpb24tcHJvdG9jb2wiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vd2ViLWFubm90YXRpb24vcHJvdG9jb2wvd2QvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLXByb3RvY29sIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24tcHJvdG9jb2wvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24tcHJvdG9jb2wvdmVyc2lvbnMvMjAxNTA3MDIiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLXByb3RvY29sL3ZlcnNpb25zLzIwMTcwMjIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2Fubm90YXRpb24tcHJvdG9jb2wiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jbHJlcS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgc3VtbWFyaXplcyB0aGUgdGV4dCBjb21wb3NpdGlvbiByZXF1aXJlbWVudHMgaW4gdGhlIENoaW5lc2Ugd3JpdGluZyBzeXN0ZW0uIE9uZSBvZiB0aGUgZ29hbHMgb2YgdGhlIHRhc2sgZm9yY2UgaXMgdG8gZGVzY3JpYmUgdGhlIGlzc3VlcyBpbiB0aGUgQ2hpbmVzZSBsYXlvdXQgcmVxdWlyZW1lbnRzLCBhbm90aGVyIG9uZSBpcyB0byBwcm92aWRlIHNhdGlzZmFjdG9yeSBlcXVpdmFsZW50IHRvIHRoZSBjdXJyZW50IHN0YW5kYXJkcyAoaS5lLiBVbmljb2RlKSwgYWxzbyB0byBwcm9tb3RlIHZlbmRvcnMgdG8gaW1wbGVtZW50IHRob3NlIHJlbGV2YW50IGZlYXR1cmVzIGNvcnJlY3RseS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXF1aXJlbWVudHMgZm9yIENoaW5lc2UgVGV4dCBMYXlvdXQgLSDkuK3mlofmjpLniYjpnIDmsYIiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjbHJlcSIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vd3d3LnczLm9yZy9JbnRlcm5hdGlvbmFsL2NscmVxLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xyZXEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xyZXEvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NscmVxL3ZlcnNpb25zLzIwMTUwNzIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xyZXEvdmVyc2lvbnMvMjAyNTA3MDEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRHJhZnQgTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jbHJlcSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NsZWFyLXNpdGUtZGF0YS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVmaW5lcyBhbiBpbXBlcmF0aXZlIG1lY2hhbmlzbSB3aGljaCBhbGxvd3Mgd2ViIGRldmVsb3BlcnMgdG8gaW5zdHJ1Y3QgYSB1c2VyIGFnZW50IHRvIGNsZWFyIGEgdXNlcuKAmXMgbG9jYWxseSBzdG9yZWQgZGF0YSByZWxhdGVkIHRvIGEgaG9zdCBhbmQgaXRzIHN1YmRvbWFpbnMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2xlYXIgU2l0ZSBEYXRhIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY2xlYXItc2l0ZS1kYXRhIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYmFwcHNlYy1jbGVhci1zaXRlLWRhdGEvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbGVhci1zaXRlLWRhdGEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xlYXItc2l0ZS1kYXRhL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbGVhci1zaXRlLWRhdGEvdmVyc2lvbnMvMjAxNTA4MDQiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbGVhci1zaXRlLWRhdGEvdmVyc2lvbnMvMjAxNzExMzAiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jbGVhci1zaXRlLWRhdGEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtMjAxNS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgY29sbGVjdHMgdG9nZXRoZXIgaW50byBvbmUgZGVmaW5pdGlvbiBhbGwgdGhlIHNwZWNzIHRoYXQgdG9nZXRoZXIgZm9ybSB0aGUgY3VycmVudCBzdGF0ZSBvZiBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIGFzIG9mIDIwMTUuIFRoZSBwcmltYXJ5IGF1ZGllbmNlIGlzIENTUyBpbXBsZW1lbnRlcnMsIG5vdCBDU1MgYXV0aG9ycywgYXMgdGhpcyBkZWZpbml0aW9uIGluY2x1ZGVzIG1vZHVsZXMgYnkgc3BlY2lmaWNhdGlvbiBzdGFiaWxpdHksIG5vdCBXZWIgYnJvd3NlciBhZG9wdGlvbiByYXRlLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNTUyBTbmFwc2hvdCAyMDE1IiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NzLTIwMTUiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLTIwMTUvIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIyMDE1IiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxNSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxNS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMTUvdmVyc2lvbnMvMjAxNTEwMTMiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDE1L3ZlcnNpb25zLzIwMTUxMDEzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY3NzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvQ09XTC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgc3BlY2lmaWNhdGlvbiBkZWZpbmVzIGFuIEFQSSBmb3Igc3BlY2lmeWluZyBwcml2YWN5IGFuZCBpbnRlZ3JpdHkgcG9saWNpZXMgb24gZGF0YSwgaW4gdGhlIGZvcm0gb2Ygb3JpZ2luIGxhYmVscywgYW5kIGEgbWVjaGFuaXNtIGZvciBjb25maW5pbmcgY29kZSBhY2NvcmRpbmcgdG8gc3VjaCBwb2xpY2llcy4gVGhpcyBhbGxvd3MgV2ViIGFwcGxpY2F0aW9uIGF1dGhvcnMgYW5kIHNlcnZlciBvcGVyYXRvcnMgdG8gc2hhcmVkIGRhdGEgd2l0aCB1bnRydXN0ZWQgLSBidWdneSBidXQgbm90IG1hbGljaW91cyAtIGNvZGUgKGUuZy4sIGluIGEgbWFzaHVwIHNjZW5hcmlvKSB5ZXQgaW1wb3NlIHJlc3RyaWN0aW9ucyBvbiBob3cgdGhlIGNvZGUgY2FuIHNoYXJlIHRoZSBkYXRhIGZ1cnRoZXIuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29uZmluZW1lbnQgd2l0aCBPcmlnaW4gV2ViIExhYmVscyIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogIkNPV0wiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLWNvd2wvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DT1dMIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NPV0wvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL0NPV0wvdmVyc2lvbnMvMjAxNTEwMTUiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DT1dML3ZlcnNpb25zLzIwMTUxMDE1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL0NPV0wiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3AtY29va2llcy8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVmaW5lcyBtZWNoYW5pc21zIGJ5IHdoaWNoIHdlYiBkZXZlbG9wZXJzIGNhbiBsaW1pdCB0aGUgd2F5cyBpbiB3aGljaCBjb29raWVzIG1heSBiZSBzZXQgaW4gdGhlIGNvbnRleHQgb2YgdGhlaXIgc2l0ZXMgYW5kIGFwcGxpY2F0aW9ucy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlY3VyaXR5IFBvbGljeTogQ29va2llIENvbnRyb2xzIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NwLWNvb2tpZXMiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vd2ViYXBwc2VjLWNzcC9jb29raWVzLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NwLWNvb2tpZXMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NwLWNvb2tpZXMvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NzcC1jb29raWVzL3ZlcnNpb25zLzIwMTUxMjE1IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NwLWNvb2tpZXMvdmVyc2lvbnMvMjAxNjA5MTMiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jc3AtY29va2llcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2NzcC1lbWJlZGRlZC1lbmZvcmNlbWVudC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVmaW5lcyBhIG1lY2hhbmlzbSBieSB3aGljaCBhIHdlYiBwYWdlIGNhbiBlbWJlZCBhIG5lc3RlZCBicm93c2luZyBjb250ZXh0IGlmIGFuZCBvbmx5IGlmIGl0IGFncmVlcyB0byBlbmZvcmNlIGEgcGFydGljdWxhciBzZXQgb2YgcmVzdHJpY3Rpb25zIHVwb24gaXRzZWxmLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNvbnRlbnQgU2VjdXJpdHkgUG9saWN5OiBFbWJlZGRlZCBFbmZvcmNlbWVudCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNzcC1lbWJlZGRlZC1lbmZvcmNlbWVudCIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtY3NwZWUvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3AtZW1iZWRkZWQtZW5mb3JjZW1lbnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NwLWVtYmVkZGVkLWVuZm9yY2VtZW50L3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3AtZW1iZWRkZWQtZW5mb3JjZW1lbnQvdmVyc2lvbnMvMjAxNTEyMTUiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3AtZW1iZWRkZWQtZW5mb3JjZW1lbnQvdmVyc2lvbnMvMjAxNjA5MDkiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jc3AtZW1iZWRkZWQtZW5mb3JjZW1lbnQiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9DU1AzLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBkZWZpbmVzIGEgbWVjaGFuaXNtIGJ5IHdoaWNoIHdlYiBkZXZlbG9wZXJzIGNhbiBjb250cm9sIHRoZSByZXNvdXJjZXMgd2hpY2ggYSBwYXJ0aWN1bGFyIHBhZ2UgY2FuIGZldGNoIG9yIGV4ZWN1dGUsIGFzIHdlbGwgYXMgYSBudW1iZXIgb2Ygc2VjdXJpdHktcmVsZXZhbnQgcG9saWN5IGRlY2lzaW9ucy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDb250ZW50IFNlY3VyaXR5IFBvbGljeSBMZXZlbCAzIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiQ1NQMyIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWJhcHBzZWMtY3NwLyIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NQMyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1AzL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1AzL3ZlcnNpb25zLzIwMTYwMTI2IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NQMy92ZXJzaW9ucy8yMDI1MDYzMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL0NTUCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FjdGl2aXR5cHViLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhlIEFjdGl2aXR5UHViIHByb3RvY29sIGlzIGEgc29jaWFsIG5ldHdvcmtpbmcgcHJvdG9jb2wgYmFzZWQgdXBvbiB0aGUgQWN0aXZpdHlTdHJlYW1zIDIuMCBkYXRhIGZvcm1hdC4gSXQgaXMgYmFzZWQgdXBvbiBleHBlcmllbmNlIGdhaW5lZCBmcm9tIGltcGxlbWVudGluZyBhbmQgd29ya2luZyB3aXRoIHRoZSBPU3RhdHVzIGFuZCBQdW1wLmlvIHByb3RvY29scy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBY3Rpdml0eVB1YiIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFjdGl2aXR5cHViIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FjdGl2aXR5cHViLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0aXZpdHlwdWIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0aXZpdHlwdWIvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdGl2aXR5cHViL3ZlcnNpb25zLzIwMTYwMTI4IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0aXZpdHlwdWIvdmVyc2lvbnMvMjAxODAxMjMiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVjb21tZW5kYXRpb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYWN0aXZpdHlwdWIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hbm5vdGF0aW9uLXZvY2FiLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhlIFdlYiBBbm5vdGF0aW9uIFZvY2FidWxhcnkgc3BlY2lmaWVzIHRoZSBzZXQgb2YgUkRGIGNsYXNzZXMsIHByZWRpY2F0ZXMgYW5kIG5hbWVkIGVudGl0aWVzIHRoYXQgYXJlIHVzZWQgYnkgdGhlIFdlYiBBbm5vdGF0aW9uIERhdGEgTW9kZWwuIEl0IGFsc28gbGlzdHMgcmVjb21tZW5kZWQgdGVybXMgZnJvbSBvdGhlciBvbnRvbG9naWVzIHRoYXQgYXJlIHVzZWQgaW4gdGhlIG1vZGVsLCBhbmQgcHJvdmlkZXMgdGhlIEpTT04tTEQgQ29udGV4dCBhbmQgcHJvZmlsZSBkZWZpbml0aW9ucyBuZWVkZWQgdG8gdXNlIHRoZSBXZWIgQW5ub3RhdGlvbiBKU09OIHNlcmlhbGl6YXRpb24gaW4gYSBMaW5rZWQgRGF0YSBjb250ZXh0LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIldlYiBBbm5vdGF0aW9uIFZvY2FidWxhcnkiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhbm5vdGF0aW9uLXZvY2FiIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3dlYi1hbm5vdGF0aW9uLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYW5ub3RhdGlvbi12b2NhYiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLXZvY2FiL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLXZvY2FiL3ZlcnNpb25zLzIwMTYwMzMxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIldvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLXZvY2FiL3ZlcnNpb25zLzIwMTcwMjIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJlY29tbWVuZGF0aW9uIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2Fubm90YXRpb24tdm9jYWIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9DU1MyMi8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPkNTUyBpcyBhIHN0eWxlIHNoZWV0IGxhbmd1YWdlIHRoYXQgYWxsb3dzIGF1dGhvcnMgYW5kIHVzZXJzIHRvIGF0dGFjaCBzdHlsZSAoZS5nLiwgZm9udHMgYW5kIHNwYWNpbmcpIHRvIHN0cnVjdHVyZWQgZG9jdW1lbnRzIChlLmcuLCBIVE1MIGRvY3VtZW50cyBhbmQgWE1MIGFwcGxpY2F0aW9ucykuIENTUyAyLjIgaXMgdGhlIHNlY29uZCByZXZpc2lvbiBvZiBsZXZlbCAyIG9mIENTUy4gSXQgY29ycmVjdHMgYSBmZXcgZXJyb3JzIGluIENTUyAyLjEuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyBMZXZlbCAyIFJldmlzaW9uIDIgKENTUyAyLjIpIFNwZWNpZmljYXRpb24iLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJDU1MyMiIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MyLyIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMi4yIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1MyMiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1MyMi92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvQ1NTMjIvdmVyc2lvbnMvMjAxNjA0MTIiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9DU1MyMi92ZXJzaW9ucy8yMDE2MDQxMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jc3MiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hY2NlbGVyb21ldGVyLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBzcGVjaWZpY2F0aW9uIGRlZmluZXMgYWNjZWxlcm9tZXRlciBzZW5zb3IgaW50ZXJmYWNlIGZvciBvYnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgYWNjZWxlcmF0aW9uIGFwcGxpZWQgdG8gdGhlIFgsIFkgYW5kIFogYXhpcyBvZiBhIGRldmljZSB0aGF0IGhvc3RzIHRoZSBzZW5zb3IuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWNjZWxlcm9tZXRlciIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFjY2VsZXJvbWV0ZXIiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vYWNjZWxlcm9tZXRlci8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY2VsZXJvbWV0ZXIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjZWxlcm9tZXRlci92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjZWxlcm9tZXRlci92ZXJzaW9ucy8yMDE2MDkxMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY2VsZXJvbWV0ZXIvdmVyc2lvbnMvMjAyNTAyMTIiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ2FuZGlkYXRlIFJlY29tbWVuZGF0aW9uIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FjY2VsZXJvbWV0ZXIiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtMjAxNy8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgY29sbGVjdHMgdG9nZXRoZXIgaW50byBvbmUgZGVmaW5pdGlvbiBhbGwgdGhlIHNwZWNzIHRoYXQgdG9nZXRoZXIgZm9ybSB0aGUgY3VycmVudCBzdGF0ZSBvZiBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIGFzIG9mIDIwMTcuIFRoZSBwcmltYXJ5IGF1ZGllbmNlIGlzIENTUyBpbXBsZW1lbnRlcnMsIG5vdCBDU1MgYXV0aG9ycywgYXMgdGhpcyBkZWZpbml0aW9uIGluY2x1ZGVzIG1vZHVsZXMgYnkgc3BlY2lmaWNhdGlvbiBzdGFiaWxpdHksIG5vdCBXZWIgYnJvd3NlciBhZG9wdGlvbiByYXRlLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNTUyBTbmFwc2hvdCAyMDE3IiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NzLTIwMTciLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLTIwMTcvIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIyMDE3IiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxNyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxNy92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMTcvdmVyc2lvbnMvMjAxNzAxMzEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDE3L3ZlcnNpb25zLzIwMTcwMTMxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY3NzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvYW5ub3RhdGlvbi1odG1sLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBOb3RlIGRlc2NyaWJlcyBhbmQgaWxsdXN0cmF0ZXMgcG90ZW50aWFsIGFwcHJvYWNoZXMgZm9yIGluY2x1ZGluZyBhbm5vdGF0aW9ucyB3aXRoaW4gSFRNTCBkb2N1bWVudHMuIEV4YW1wbGVzIGFsc28gYXJlIGluY2x1ZGVkIGlsbHVzdHJhdGluZyB0aGUgdXNlIHdpdGhpbiBhbiBIVE1MIGRvY3VtZW50IG9mIGFubm90YXRpb24gU2VsZWN0b3JzIGFzIGZyYWdtZW50IGlkZW50aWZpZXJzLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkVtYmVkZGluZyBXZWIgQW5ub3RhdGlvbnMgaW4gSFRNTCIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImFubm90YXRpb24taHRtbCIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby93ZWItYW5ub3RhdGlvbi9zZXJpYWxpemF0aW9uLWh0bWwtbm90ZS8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24taHRtbCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbm5vdGF0aW9uLWh0bWwvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Fubm90YXRpb24taHRtbC92ZXJzaW9ucy8yMDE3MDIyMyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYW5ub3RhdGlvbi1odG1sL3ZlcnNpb25zLzIwMTcwMjIzIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYW5ub3RhdGlvbi1odG1sIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvYWN0LXJ1bGVzLWZvcm1hdC0xLjAvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGlzIGEgVzNDIFJlY29tbWVuZGF0aW9uLiBEZWZpbmVzIGEgZm9ybWF0IGZvciB3cml0aW5nIGFjY2Vzc2liaWxpdHkgdGVzdCBydWxlcyBmb3IgYXV0b21hdGVkIHRlc3RpbmcgdG9vbHMgYW5kIG1hbnVhbCB0ZXN0aW5nIG1ldGhvZG9sb2dpZXMuIEl0IGNhbiBiZSB1c2VkIGZvciBldmFsdWF0aW9uIHRvIGRpZmZlcmVudCBhY2Nlc3NpYmlsaXR5IHN0YW5kYXJkcywgc3VjaCBhcyB0aGUgVzNDIFdlYiBDb250ZW50IEFjY2Vzc2liaWxpdHkgR3VpZGVsaW5lcyAoV0NBRykuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWNjZXNzaWJpbGl0eSBDb25mb3JtYW5jZSBUZXN0aW5nIChBQ1QpIFJ1bGVzIEZvcm1hdCAxLjAiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhY3QtcnVsZXMtZm9ybWF0LTEuMCIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby93Y2FnLWFjdC9hY3QtcnVsZXMtZm9ybWF0Lmh0bWwiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMCIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0LXJ1bGVzLWZvcm1hdC0xLjAiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0LXJ1bGVzLWZvcm1hdC0xLjAvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdC1ydWxlcy1mb3JtYXQtMS4wL3ZlcnNpb25zLzIwMTcwNDA2IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0LXJ1bGVzLWZvcm1hdC0xLjAvdmVyc2lvbnMvMjAxOTEwMzEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmVjb21tZW5kYXRpb24iCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYWN0LXJ1bGVzLWZvcm1hdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nvdmpzb24tb3ZlcnZpZXcvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIE5vdGUgZGVzY3JpYmVzIENvdmVyYWdlSlNPTiwgYSBkYXRhIGZvcm1hdCBmb3IgZGVzY3JpYmluZyBcImNvdmVyYWdlXCIgZGF0YSBpbiBKYXZhU2NyaXB0IE9iamVjdCBOb3RhdGlvbiAoSlNPTiksIGFuZCBwcm92aWRlcyBhbiBvdmVydmlldyBvZiBpdHMgZGVzaWduIGFuZCBjYXBhYmlsaXRpZXMuIFRoZSBwcmltYXJ5IGludGVuZGVkIHB1cnBvc2Ugb2YgdGhlIGZvcm1hdCBpcyB0byBlbmFibGUgZGF0YSB0cmFuc2ZlciBiZXR3ZWVuIHNlcnZlcnMgYW5kIHdlYiBicm93c2VycywgdG8gc3VwcG9ydCB0aGUgZGV2ZWxvcG1lbnQgb2YgaW50ZXJhY3RpdmUsIGRhdGEtZHJpdmVuIHdlYiBhcHBsaWNhdGlvbnMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiT3ZlcnZpZXcgb2YgdGhlIENvdmVyYWdlSlNPTiBmb3JtYXQiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjb3Zqc29uLW92ZXJ2aWV3IiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3Nkdy9jb3ZlcmFnZS1qc29uLyIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY292anNvbi1vdmVydmlldyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb3Zqc29uLW92ZXJ2aWV3L3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb3Zqc29uLW92ZXJ2aWV3L3ZlcnNpb25zLzIwMTcwNTA5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY292anNvbi1vdmVydmlldy92ZXJzaW9ucy8yMDE3MDcxMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2Nvdmpzb24tb3ZlcnZpZXciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jbG91ZC1icm93c2VyLWFyY2gvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5BIENsb3VkIEJyb3dzZXIgaXMgYSBicm93c2VyIHJ1bm5pbmcgYW5kIGV4ZWN1dGluZyBvbiBhIHNlcnZlci4gVGhpcyBkb2N1bWVudCBkZXNjcmliZXMgdGhlIGNvbmNlcHRzIGFuZCBhcmNoaXRlY3R1cmUgZm9yIHRoZSBDbG91ZCBCcm93c2VyLiBUaGUgbWFpbiBwdXJwb3NlIGlzIHRvIHByb3ZpZGUgdGhlIGJ1aWxkaW5nIGJsb2NrcyBmb3IgYSBDbG91ZCBCcm93c2VyIHNvbHV0aW9uLiA8L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDbG91ZCBCcm93c2VyIEFyY2hpdGVjdHVyZSIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNsb3VkLWJyb3dzZXItYXJjaCIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby9XZWItYW5kLVRWLUlHL2Nsb3VkLWJyb3dzZXItdGYvIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbG91ZC1icm93c2VyLWFyY2giCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY2xvdWQtYnJvd3Nlci1hcmNoL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jbG91ZC1icm93c2VyLWFyY2gvdmVyc2lvbnMvMjAxNzA2MDgiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nsb3VkLWJyb3dzZXItYXJjaC92ZXJzaW9ucy8yMDE3MDYwOCIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2Nsb3VkLWJyb3dzZXItYXJjaCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FscmVxLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBkZXNjcmliZXMgcmVxdWlyZW1lbnRzIGZvciB0aGUgbGF5b3V0IGFuZCBwcmVzZW50YXRpb24gb2YgdGV4dCBpbiBsYW5ndWFnZXMgdGhhdCB1c2UgdGhlIEFyYWJpYyBzY3JpcHQgd2hlbiB0aGV5IGFyZSB1c2VkIGJ5IFdlYiBzdGFuZGFyZHMgYW5kIHRlY2hub2xvZ2llcywgc3VjaCBhcyBIVE1MLCBDU1MsIE1vYmlsZSBXZWIsIERpZ2l0YWwgUHVibGljYXRpb25zLCBhbmQgVW5pY29kZS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJBcmFiaWMgJiBQZXJzaWFuIExheW91dCBSZXF1aXJlbWVudHMiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhbHJlcSIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby9hbHJlcS8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FscmVxIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FscmVxL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hbHJlcS92ZXJzaW9ucy8yMDE4MDIyMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FscmVxL3ZlcnNpb25zLzIwMjQwOTIwIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkRyYWZ0IE5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYWxyZXEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jb3JlLWFhbS0xLjIvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJUaGlzIGRvY3VtZW50IGRlc2NyaWJlcyBob3cgdXNlciBhZ2VudHMgc2hvdWxkIGV4cG9zZSBzZW1hbnRpY3Mgb2Ygd2ViIGNvbnRlbnQgbGFuZ3VhZ2VzIHRvIGFjY2Vzc2liaWxpdHkgQVBJcy4gVGhpcyBoZWxwcyB1c2VycyB3aXRoIGRpc2FiaWxpdGllcyB0byBvYnRhaW4gYW5kIGludGVyYWN0IHdpdGggaW5mb3JtYXRpb24gdXNpbmcgYXNzaXN0aXZlIHRlY2hub2xvZ2llcy4gRG9jdW1lbnRpbmcgdGhlc2UgbWFwcGluZ3MgcHJvbW90ZXMgaW50ZXJvcGVyYWJsZSBleHBvc3VyZSBvZiByb2xlcywgc3RhdGVzLCBwcm9wZXJ0aWVzLCBhbmQgZXZlbnRzIGltcGxlbWVudGVkIGJ5IGFjY2Vzc2liaWxpdHkgQVBJcyBhbmQgaGVscHMgdG8gZW5zdXJlIHRoYXQgdGhpcyBpbmZvcm1hdGlvbiBhcHBlYXJzIGluIGEgbWFubmVyIGNvbnNpc3RlbnQgd2l0aCBhdXRob3IgaW50ZW50LiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ29yZSBBY2Nlc3NpYmlsaXR5IEFQSSBNYXBwaW5ncyAxLjIiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjb3JlLWFhbS0xLjIiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vY29yZS1hYW0vIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIxLjIiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb3JlLWFhbS0xLjIvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMi92ZXJzaW9ucy8yMDE4MDcxOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvcmUtYWFtLTEuMi92ZXJzaW9ucy8yMDI1MDYxNyIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDYW5kaWRhdGUgUmVjb21tZW5kYXRpb24gRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY29yZS1hYW0iCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtMjAxOC8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgY29sbGVjdHMgdG9nZXRoZXIgaW50byBvbmUgZGVmaW5pdGlvbiBhbGwgdGhlIHNwZWNzIHRoYXQgdG9nZXRoZXIgZm9ybSB0aGUgY3VycmVudCBzdGF0ZSBvZiBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIGFzIG9mIDIwMTguIFRoZSBwcmltYXJ5IGF1ZGllbmNlIGlzIENTUyBpbXBsZW1lbnRlcnMsIG5vdCBDU1MgYXV0aG9ycywgYXMgdGhpcyBkZWZpbml0aW9uIGluY2x1ZGVzIG1vZHVsZXMgYnkgc3BlY2lmaWNhdGlvbiBzdGFiaWxpdHksIG5vdCBXZWIgYnJvd3NlciBhZG9wdGlvbiByYXRlLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNTUyBTbmFwc2hvdCAyMDE4IiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NzLTIwMTgiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLTIwMTgvIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIyMDE4IiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxOCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAxOC92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMTgvdmVyc2lvbnMvMjAxODExMTUiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDE4L3ZlcnNpb25zLzIwMTkwMTIyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIlJldGlyZWQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY3NzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY29nYS11c2FibGUvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IGlzIGEgZ2FwIGFuYWx5c2lzIGFuZCByb2FkbWFwIGZvciB0aGUgc3RhdGUgb2YgYWNjZXNzaWJpbGl0eSBmb3IgcGVvcGxlIHdpdGggbGVhcm5pbmcgYW5kIGNvZ25pdGl2ZSBkaXNhYmlsaXRpZXMgd2hlbiB1c2luZyB0aGUgV2ViIGFuZCBpbmZvcm1hdGlvbiB0ZWNobm9sb2dpZXMuIEl0IGJ1aWxkcyBvbiB0aGUgaW5mb3JtYXRpb24gcHJlc2VudGVkIGluIENvZ25pdGl2ZSBBY2Nlc3NpYmlsaXR5IFVzZXIgUmVzZWFyY2ggYW5kIENvZ25pdGl2ZSBBY2Nlc3NpYmlsaXR5IElzc3VlIFBhcGVycyB0byBldmFsdWF0ZSB3aGVyZSB1c2VyIG5lZWRzIHJlbWFpbiB0byBiZSBtZXQgaW4gdGVjaG5vbG9naWVzIGFuZCBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMuIEZvciB2YXJpb3VzIGFjY2Vzc2liaWxpdHkgaXNzdWVzLCB0aGlzIGRvY3VtZW50IHByb3ZpZGVzIGEgc3VtbWFyeSBvZiBpc3N1ZXMgYW5kIHRlY2huaXF1ZXMsIHRoZW4gaWRlbnRpZmllcyBnYXBzIGFuZCB1bm1ldCB1c2VyIG5lZWRzIGFuZCBzdWdnZXN0IHdheXMgdG8gbWVldCB0aGVzZSBuZWVkcy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJNYWtpbmcgQ29udGVudCBVc2FibGUgZm9yIFBlb3BsZSB3aXRoIENvZ25pdGl2ZSBhbmQgTGVhcm5pbmcgRGlzYWJpbGl0aWVzIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY29nYS11c2FibGUiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vY29nYS9jb250ZW50LXVzYWJsZS8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvZ2EtdXNhYmxlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvZ2EtdXNhYmxlL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jb2dhLXVzYWJsZS92ZXJzaW9ucy8yMDE4MTIxMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2NvZ2EtdXNhYmxlL3ZlcnNpb25zLzIwMjEwNDI5IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY29nYS11c2FibGUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9hY2NuYW1lLTEuMi8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgZGVzY3JpYmVzIGhvdyB1c2VyIGFnZW50cyBkZXRlcm1pbmUgdGhlIG5hbWVzIGFuZCBkZXNjcmlwdGlvbnMgb2YgYWNjZXNzaWJsZSBvYmplY3RzIGZyb20gd2ViIGNvbnRlbnQgbGFuZ3VhZ2VzLiBUaGlzIGluZm9ybWF0aW9uIGlzIGluIHR1cm4gZXhwb3NlZCB0aHJvdWdoIGFjY2Vzc2liaWxpdHkgQVBJcyBzbyB0aGF0IGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMgY2FuIGlkZW50aWZ5IHRoZXNlIG9iamVjdHMgYW5kIHByZXNlbnQgdGhlaXIgbmFtZXMgb3IgZGVzY3JpcHRpb25zIHRvIHVzZXJzLiBEb2N1bWVudGluZyB0aGUgYWxnb3JpdGhtIHRocm91Z2ggd2hpY2ggbmFtZXMgYW5kIGRlc2NyaXB0aW9ucyBhcmUgdG8gYmUgZGV0ZXJtaW5lZCBwcm9tb3RlcyBpbnRlcm9wZXJhYmxlIGV4cG9zdXJlIG9mIHRoZXNlIHByb3BlcnRpZXMgYW1vbmcgZGlmZmVyZW50IGFjY2Vzc2liaWxpdHkgQVBJcyBhbmQgaGVscHMgdG8gZW5zdXJlIHRoYXQgdGhpcyBpbmZvcm1hdGlvbiBhcHBlYXJzIGluIGEgbWFubmVyIGNvbnNpc3RlbnQgd2l0aCBhdXRob3IgaW50ZW50LjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkFjY2Vzc2libGUgTmFtZSBhbmQgRGVzY3JpcHRpb24gQ29tcHV0YXRpb24gMS4yIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYWNjbmFtZS0xLjIiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL3czYy5naXRodWIuaW8vYWNjbmFtZS8iLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMiIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjbmFtZS0xLjIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjbmFtZS0xLjIvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY25hbWUtMS4yL3ZlcnNpb25zLzIwMTkwNzExIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWNjbmFtZS0xLjIvdmVyc2lvbnMvMjAyNTA2MTciLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9hY2NuYW1lIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvYWNjZXNzaWJpbGl0eS1jb25mb3JtYW5jZS1jaGFsbGVuZ2VzLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+RXhwbG9yZXMgaG93IHRlc3RhYmlsaXR5IGFuZCBwYWdlLWJhc2VkIGNvbmZvcm1hbmNlIHZlcmlmaWNhdGlvbiBvZiBhY2Nlc3NpYmlsaXR5IGd1aWRlbGluZXMgcHJlc2VudHMgY2hhbGxlbmdlcyBmb3IgYSBicm9hZCByYW5nZSBvZiB3ZWJzaXRlcyBhbmQgd2ViIGFwcGxpY2F0aW9ucy48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDaGFsbGVuZ2VzIHdpdGggQWNjZXNzaWJpbGl0eSBHdWlkZWxpbmVzIENvbmZvcm1hbmNlIGFuZCBUZXN0aW5nLCBhbmQgQXBwcm9hY2hlcyBmb3IgTWl0aWdhdGluZyBUaGVtIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiYWNjZXNzaWJpbGl0eS1jb25mb3JtYW5jZS1jaGFsbGVuZ2VzIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly93M2MuZ2l0aHViLmlvL3djYWcvY29uZm9ybWFuY2UtY2hhbGxlbmdlcy8iLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY2Vzc2liaWxpdHktY29uZm9ybWFuY2UtY2hhbGxlbmdlcyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9hY2Nlc3NpYmlsaXR5LWNvbmZvcm1hbmNlLWNoYWxsZW5nZXMvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY2Vzc2liaWxpdHktY29uZm9ybWFuY2UtY2hhbGxlbmdlcy92ZXJzaW9ucy8yMDIwMDUwMSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJGaXJzdCBQdWJsaWMgV29ya2luZyBEcmFmdCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjY2Vzc2liaWxpdHktY29uZm9ybWFuY2UtY2hhbGxlbmdlcy92ZXJzaW9ucy8yMDIwMDYxOSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2FjY2Vzc2liaWxpdHktY29uZm9ybWFuY2UtY2hhbGxlbmdlcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy0yMDIwLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhpcyBkb2N1bWVudCBjb2xsZWN0cyB0b2dldGhlciBpbnRvIG9uZSBkZWZpbml0aW9uIGFsbCB0aGUgc3BlY3MgdGhhdCB0b2dldGhlciBmb3JtIHRoZSBjdXJyZW50IHN0YXRlIG9mIENhc2NhZGluZyBTdHlsZSBTaGVldHMgKENTUykgYXMgb2YgMjAyMC4gVGhlIHByaW1hcnkgYXVkaWVuY2UgaXMgQ1NTIGltcGxlbWVudGVycywgbm90IENTUyBhdXRob3JzLCBhcyB0aGlzIGRlZmluaXRpb24gaW5jbHVkZXMgbW9kdWxlcyBieSBzcGVjaWZpY2F0aW9uIHN0YWJpbGl0eSwgbm90IFdlYiBicm93c2VyIGFkb3B0aW9uIHJhdGUuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQ1NTIFNuYXBzaG90IDIwMjAiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJjc3MtMjAyMCIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtMjAyMC8iLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjIwMjAiLAogICAgICAgICAgICAgICAgIl9saW5rcyI6IHsKICAgICAgICAgICAgICAgICAgICAic2VsZiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDIwIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInZlcnNpb24taGlzdG9yeSI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDIwL3ZlcnNpb25zIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImZpcnN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAyMC92ZXJzaW9ucy8yMDIwMTIyMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJSZXRpcmVkIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMjAvdmVyc2lvbnMvMjAyMDEyMjIiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiUmV0aXJlZCIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJzZXJpZXMiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9uLXNlcmllcy9jc3MiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAic2hvcnRsaW5rIjogImh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtMjAyMS8iLAogICAgICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjxwPlRoaXMgZG9jdW1lbnQgY29sbGVjdHMgdG9nZXRoZXIgaW50byBvbmUgZGVmaW5pdGlvbiBhbGwgdGhlIHNwZWNzIHRoYXQgdG9nZXRoZXIgZm9ybSB0aGUgY3VycmVudCBzdGF0ZSBvZiBDYXNjYWRpbmcgU3R5bGUgU2hlZXRzIChDU1MpIGFzIG9mIDIwMjEuIFRoZSBwcmltYXJ5IGF1ZGllbmNlIGlzIENTUyBpbXBsZW1lbnRlcnMsIG5vdCBDU1MgYXV0aG9ycywgYXMgdGhpcyBkZWZpbml0aW9uIGluY2x1ZGVzIG1vZHVsZXMgYnkgc3BlY2lmaWNhdGlvbiBzdGFiaWxpdHksIG5vdCBXZWIgYnJvd3NlciBhZG9wdGlvbiByYXRlLjwvcD4iLAogICAgICAgICAgICAgICAgInRpdGxlIjogIkNTUyBTbmFwc2hvdCAyMDIxIiwKICAgICAgICAgICAgICAgICJzaG9ydG5hbWUiOiAiY3NzLTIwMjEiLAogICAgICAgICAgICAgICAgImVkaXRvci1kcmFmdCI6ICJodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLTIwMjEvIiwKICAgICAgICAgICAgICAgICJzZXJpZXMtdmVyc2lvbiI6ICIyMDIxIiwKICAgICAgICAgICAgICAgICJfbGlua3MiOiB7CiAgICAgICAgICAgICAgICAgICAgInNlbGYiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAyMSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJ2ZXJzaW9uLWhpc3RvcnkiOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAyMS92ZXJzaW9ucyIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJmaXJzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMjEvdmVyc2lvbnMvMjAyMTEyMjEiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiTm90ZSIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICJsYXRlc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDIxL3ZlcnNpb25zLzIwMjExMjMxIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIk5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvY3NzIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInNob3J0bGluayI6ICJodHRwczovL3d3dy53My5vcmcvVFIvY3NzLTIwMjIvIiwKICAgICAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICI8cD5UaGlzIGRvY3VtZW50IGNvbGxlY3RzIHRvZ2V0aGVyIGludG8gb25lIGRlZmluaXRpb24gYWxsIHRoZSBzcGVjcyB0aGF0IHRvZ2V0aGVyIGZvcm0gdGhlIGN1cnJlbnQgc3RhdGUgb2YgQ2FzY2FkaW5nIFN0eWxlIFNoZWV0cyAoQ1NTKSBhcyBvZiAyMDIyLiBUaGUgcHJpbWFyeSBhdWRpZW5jZSBpcyBDU1MgaW1wbGVtZW50ZXJzLCBub3QgQ1NTIGF1dGhvcnMsIGFzIHRoaXMgZGVmaW5pdGlvbiBpbmNsdWRlcyBtb2R1bGVzIGJ5IHNwZWNpZmljYXRpb24gc3RhYmlsaXR5LCBub3QgV2ViIGJyb3dzZXIgYWRvcHRpb24gcmF0ZS48L3A+IiwKICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJDU1MgU25hcHNob3QgMjAyMiIsCiAgICAgICAgICAgICAgICAic2hvcnRuYW1lIjogImNzcy0yMDIyIiwKICAgICAgICAgICAgICAgICJlZGl0b3ItZHJhZnQiOiAiaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy0yMDIyLyIsCiAgICAgICAgICAgICAgICAic2VyaWVzLXZlcnNpb24iOiAiMjAyMiIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMjIiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvY3NzLTIwMjIvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2Nzcy0yMDIyL3ZlcnNpb25zLzIwMjIxMTIyIiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkRyYWZ0IE5vdGUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAibGF0ZXN0LXZlcnNpb24iOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICJocmVmIjogImh0dHBzOi8vYXBpLnczLm9yZy9zcGVjaWZpY2F0aW9ucy9jc3MtMjAyMi92ZXJzaW9ucy8yMDIyMTEyMiIsCiAgICAgICAgICAgICAgICAgICAgICAgICJ0aXRsZSI6ICJEcmFmdCBOb3RlIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgInNlcmllcyI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb24tc2VyaWVzL2NzcyIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJzaG9ydGxpbmsiOiAiaHR0cHM6Ly93d3cudzMub3JnL1RSL2FjdC1ydWxlcy1mb3JtYXQtMS4xLyIsCiAgICAgICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiPHA+VGhlIEFjY2Vzc2liaWxpdHkgQ29uZm9ybWFuY2UgVGVzdGluZyAoQUNUKSBSdWxlcyBGb3JtYXQgMS4xIGRlZmluZXMgYSBmb3JtYXQgZm9yIHdyaXRpbmcgYWNjZXNzaWJpbGl0eSB0ZXN0IHJ1bGVzLiBUaGVzZSB0ZXN0IHJ1bGVzIGNhbiBiZSB1c2VkIGZvciBkZXZlbG9waW5nIGF1dG9tYXRlZCB0ZXN0aW5nIHRvb2xzIGFuZCBtYW51YWwgdGVzdGluZyBtZXRob2RvbG9naWVzLiBJdCBwcm92aWRlcyBhIGNvbW1vbiBmb3JtYXQgdGhhdCBhbGxvd3MgYW55IHBhcnR5IGludm9sdmVkIGluIGFjY2Vzc2liaWxpdHkgdGVzdGluZyB0byBkb2N1bWVudCBhbmQgc2hhcmUgdGhlaXIgdGVzdGluZyBwcm9jZWR1cmVzIGluIGEgcm9idXN0IGFuZCB1bmRlcnN0YW5kYWJsZSBtYW5uZXIuIFRoaXMgZW5hYmxlcyB0cmFuc3BhcmVuY3kgYW5kIGhhcm1vbml6YXRpb24gb2YgdGVzdGluZyBtZXRob2RzLCBpbmNsdWRpbmcgbWV0aG9kcyBpbXBsZW1lbnRlZCBieSBhY2Nlc3NpYmlsaXR5IHRlc3QgdG9vbHMuPC9wPiIsCiAgICAgICAgICAgICAgICAidGl0bGUiOiAiQWNjZXNzaWJpbGl0eSBDb25mb3JtYW5jZSBUZXN0aW5nIChBQ1QpIFJ1bGVzIEZvcm1hdCAxLjEiLAogICAgICAgICAgICAgICAgInNob3J0bmFtZSI6ICJhY3QtcnVsZXMtZm9ybWF0LTEuMSIsCiAgICAgICAgICAgICAgICAiZWRpdG9yLWRyYWZ0IjogImh0dHBzOi8vdzNjLmdpdGh1Yi5pby93Y2FnLWFjdC9hY3QtcnVsZXMtZm9ybWF0Lmh0bWwiLAogICAgICAgICAgICAgICAgInNlcmllcy12ZXJzaW9uIjogIjEuMSIsCiAgICAgICAgICAgICAgICAiX2xpbmtzIjogewogICAgICAgICAgICAgICAgICAgICJzZWxmIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0LXJ1bGVzLWZvcm1hdC0xLjEiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAidmVyc2lvbi1oaXN0b3J5IjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0LXJ1bGVzLWZvcm1hdC0xLjEvdmVyc2lvbnMiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAiZmlyc3QtdmVyc2lvbiI6IHsKICAgICAgICAgICAgICAgICAgICAgICAgImhyZWYiOiAiaHR0cHM6Ly9hcGkudzMub3JnL3NwZWNpZmljYXRpb25zL2FjdC1ydWxlcy1mb3JtYXQtMS4xL3ZlcnNpb25zLzIwMjQwNjE4IiwKICAgICAgICAgICAgICAgICAgICAgICAgInRpdGxlIjogIkZpcnN0IFB1YmxpYyBXb3JraW5nIERyYWZ0IgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgImxhdGVzdC12ZXJzaW9uIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbnMvYWN0LXJ1bGVzLWZvcm1hdC0xLjEvdmVyc2lvbnMvMjAyNDA2MTgiLAogICAgICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiRmlyc3QgUHVibGljIFdvcmtpbmcgRHJhZnQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAic2VyaWVzIjogewogICAgICAgICAgICAgICAgICAgICAgICAiaHJlZiI6ICJodHRwczovL2FwaS53My5vcmcvc3BlY2lmaWNhdGlvbi1zZXJpZXMvYWN0LXJ1bGVzLWZvcm1hdCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICBdCiAgICB9Cn0=
  recorded_at: Sat, 05 Jul 2025 14:54:20 GMT
recorded_with: VCR 6.3.1
