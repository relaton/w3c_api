---
http_interactions:
- request:
    method: get
    uri: https://api.w3.org/specifications
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.1
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Thu, 03 Jul 2025 14:11:05 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Thu, 03 Jul 2025 13:58:19 GMT
      cf-cache-status:
      - HIT
      age:
      - '766'
      set-cookie:
      - __cf_bm=0cjxQuyGj7NZDQy8X3jxgC1stRstFeYFnlBmghATjTQ-1751551865-1.0.1.1-Y3vYOKXh.JCKS9aNhMFpZAW9Q.0yFT8FgeEyzlYiVWTGepco1jaZeCV0_wuZCNBe378BqezdM5ACFx.TWkhxJLN.3UvvGoOAeLWUnYzmKJ0;
        path=/; expires=Thu, 03-Jul-25 14:41:05 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 9596f856083fe885-HKG
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 03 Jul 2025 14:11:05 GMT
- request:
    method: get
    uri: https://api.w3.org/specifications?embed=false
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Sat, 05 Jul 2025 14:54:23 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Sat, 05 Jul 2025 14:54:20 GMT
      cf-cache-status:
      - HIT
      age:
      - '3'
      set-cookie:
      - __cf_bm=aGA0wqbUrRC5gee7.v.zZhoBTLufbuYCD7lyoTG6UMU-1751727263-1.0.1.1-afI4T_VgwaBD.Q1Isvi3f5njj8v6AN6ELOUcEhoXEGHnVFtfgY0Mjxvc0Ob7BYkyil796z2.LvDf_088N5K2uw8kV5DtmKYDDTu5jqor_Ac;
        path=/; expires=Sat, 05-Jul-25 15:24:23 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 95a7b2854f58055c-HKG
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 05 Jul 2025 14:54:23 GMT
recorded_with: VCR 6.3.1
