---
http_interactions:
- request:
    method: get
    uri: https://api.w3.org/specifications?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.1
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Thu, 03 Jul 2025 14:11:06 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Thu, 03 Jul 2025 14:11:05 GMT
      cf-cache-status:
      - MISS
      set-cookie:
      - __cf_bm=Uko435.WdXVQRl7c2zXeDIVnz7NopgbYNq7UZgIcSaQ-1751551866-1.0.1.1-.l7PiBQZnGywxFeVeIJf9lWQ9Z8IQcEel5i8iyZlT9.8TTWQ8yTsLCceM7l2b.YWepiwEaF7J976XrpJPr7WXG5iBSNxmWD0.tCDjVVzvM8;
        path=/; expires=Thu, 03-Jul-25 14:41:06 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 9596f8594a586e3f-HKG
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Thu, 03 Jul 2025 14:11:06 GMT
- request:
    method: get
    uri: https://api.w3.org/specifications
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Sat, 05 Jul 2025 01:36:15 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Sat, 05 Jul 2025 01:36:12 GMT
      cf-cache-status:
      - HIT
      age:
      - '3'
      set-cookie:
      - __cf_bm=JEHcBWY7nz9.ktkt9tZh5nSQczAFxAge4lm._Cz_nqo-1751679375-1.0.1.1-b76HIPU2337WNFkKwQvDc0QNX1L5BrNpBShBUR9MPo.N.Uwmx7FENMdktaykjJ4_dquFSBpFtiBUWdii1PjgIa0FPI9AovE.TR6VcIi62jw;
        path=/; expires=Sat, 05-Jul-25 02:06:15 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 95a321607f9184b2-HKG
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 05 Jul 2025 01:36:15 GMT
- request:
    method: get
    uri: https://api.w3.org/specifications?embed=false&page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.13.2
  response:
    status:
      code: 200
      message: OK
    headers:
      date:
      - Sat, 05 Jul 2025 14:54:24 GMT
      content-type:
      - application/hal+json;version=1.0
      transfer-encoding:
      - chunked
      connection:
      - keep-alive
      cache-control:
      - public, s-maxage=900
      access-control-allow-origin:
      - "*"
      last-modified:
      - Sat, 05 Jul 2025 14:54:24 GMT
      cf-cache-status:
      - MISS
      set-cookie:
      - __cf_bm=PyD4.Z_zGp2mGuSqRZYNz1Dvs75GIZE3IkOSz97KVVE-1751727264-1.0.1.1-1lXcI2y37jthu822Qd6nwxM6kPS_zPPYregmv8.qMySz8kyniGBgBOojGsQsK.sd34oh49bcjPYZIEDQ.uxt1bi_437YUYAJyONFEYoizL0;
        path=/; expires=Sat, 05-Jul-25 15:24:24 GMT; domain=.w3.org; HttpOnly; Secure;
        SameSite=None
      vary:
      - Accept-Encoding
      server:
      - cloudflare
      cf-ray:
      - 95a7b2880b29dd4f-HKG
      alt-svc:
      - h3=":443"; ma=86400
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 05 Jul 2025 14:54:24 GMT
recorded_with: VCR 6.3.1
